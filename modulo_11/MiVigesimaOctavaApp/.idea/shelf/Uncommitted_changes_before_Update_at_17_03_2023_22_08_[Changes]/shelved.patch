Index: ../../modulo_8/MiDecimaSeptimaApp/.idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"GRADLE\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_8/MiDecimaSeptimaApp/.idea/gradle.xml b/../../modulo_8/MiDecimaSeptimaApp/.idea/gradle.xml
--- a/../../modulo_8/MiDecimaSeptimaApp/.idea/gradle.xml	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_8/MiDecimaSeptimaApp/.idea/gradle.xml	(date 1678584132388)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
Index: gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Project-wide Gradle settings.\r\n# IDE (e.g. Android Studio) users:\r\n# Gradle settings configured through the IDE *will override*\r\n# any settings specified in this file.\r\n# For more details on how to configure your build environment visit\r\n# http://www.gradle.org/docs/current/userguide/build_environment.html\r\n# Specifies the JVM arguments used for the daemon process.\r\n# The setting is particularly useful for tweaking memory settings.\r\norg.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8\r\n# When configured, Gradle will run in incubating parallel mode.\r\n# This option should only be used with decoupled projects. More details, visit\r\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\r\n# org.gradle.parallel=true\r\n# Enables namespacing of each library's R class so that its R class includes only the\r\n# resources declared in the library itself and none from the library's dependencies,\r\n# thereby reducing the size of the R class for that library\r\nandroid.nonTransitiveRClass=true
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle.properties b/gradle.properties
--- a/gradle.properties	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/gradle.properties	(date 1678772954813)
@@ -14,4 +14,6 @@
 # Enables namespacing of each library's R class so that its R class includes only the
 # resources declared in the library itself and none from the library's dependencies,
 # thereby reducing the size of the R class for that library
-android.nonTransitiveRClass=true
\ No newline at end of file
+android.nonTransitiveRClass=true
+android.useAndroidX=true
+android.enableJetifier=true
Index: ../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/controlador/ActividadControladora.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimacuartaapp.controlador;public class ActividadControladora {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/controlador/ActividadControladora.java b/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/controlador/ActividadControladora.java
--- a/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/controlador/ActividadControladora.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/controlador/ActividadControladora.java	(date 1678767923238)
@@ -1,2 +1,557 @@
-package com.curso_simulaciones.mivigesimacuartaapp.controlador;public class ActividadControladora {
+package com.curso_simulaciones.mivigesimacuartaapp.controlador;
+
+import android.app.Activity;
+import android.graphics.Color;
+import android.graphics.PorterDuff;
+import android.os.Bundle;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.LinearLayout;
+import android.widget.SeekBar;
+import android.widget.TextView;
+
+import com.curso_simulaciones.mivigesimacuartaapp.datos.AlmacenDatosRAM;
+import com.curso_simulaciones.mivigesimacuartaapp.vista.CR;
+import com.curso_simulaciones.mivigesimacuartaapp.vista.Pizarra;
+import com.curso_simulaciones.simulphysics.objetos_laboratorio.Flecha;
+import com.curso_simulaciones.simulphysics.objetos_laboratorio.Marca;
+import com.curso_simulaciones.simulphysics.objetos_laboratorio.ObjetoLaboratorio;
+import com.curso_simulaciones.simulphysics.objetos_laboratorio.Particula;
+
+public class ActividadControladora extends Activity {
+
+
+    //variable tamaño de las letras basado en resolución de pantalla
+    private int tamanoLetraResolucionIncluida;
+
+    //Objetos GUI necesarios
+    private TextView textAceletacion, textVelocidad, textAngulo;
+    private SeekBar seekBarAceleracion, seekarVelocidadInicial, seekBarAngulo;
+    private Button botonEmpezar, botonPausar;
+    private Pizarra pizarra;
+
+    //valores de las variables
+    private float velocidadInicial;
+    private float angulo;
+    private float aceleracion;
+    private float origenX_en_pixeles, origenY_en_pixeles;
+
+
+    //objetos
+    private Flecha ejeY, ejeX, vectAceleracion, vectVelocidad, vectVelocidadX, vectVelocidadY;
+    private Marca marcaEjeX, marcaEjeY;
+    private Particula bolita;
+
+    //colección de los objetos
+    private ObjetoLaboratorio[] objetos = new ObjetoLaboratorio[10];
+
+
+    /*Hilo responsable de la animación
+     El trabajo de animación es mejor manejarlo en hilo
+     aparte para evitar bloqueos de la aplicación
+     debido al manejo simultáneo de la GUI con la Acivity
+    */
+    private HiloAnimacion hilo;
+
+    private int i=-1;
+
+
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+
+        gestionarResolucion();
+
+
+        //para crear elementos de la GUI
+        crearElementosGUI();
+
+        //para informar cómo se debe pegar el adminitrador de
+        //diseño obtenido con el método GUI
+        ViewGroup.LayoutParams parametro_layout_principal = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+
+
+        //pegar el contenedor con la GUI
+        this.setContentView(crearGUI(), parametro_layout_principal);
+
+        //hilo que administrador los cálculos
+        hilo = new HiloAnimacion(this);
+        hilo.start();
+
+
+        //para administrar los eventos
+        eventos();
+
+
+    }//fin onCreate
+
+
+    /*Método auxiliar para asuntos de resolución*/
+    private void gestionarResolucion() {
+
+        tamanoLetraResolucionIncluida = (int) (0.6f * AlmacenDatosRAM.tamanoLetraResolucionIncluida);
+        /*
+        Según el diseño de la GUI se puede anticipar cuál es la
+        dimensión de la pizarra. En este caso es el 85% del ancho
+        de la pantalla y el 100% del alto de la misma
+        El cálculo del alto y el ancho de la pantalla
+        se hizo en la clase principal con el móvil
+        en portrait y aquí estamos en posición lanscape.
+        Por tanto troquemos alto por ancho y viceversa
+        */
+        CR.anchoPizarra = 0.85f * AlmacenDatosRAM.alto_pantalla;
+        CR.altoPizarra = AlmacenDatosRAM.ancho_pantalla;
+
+    }
+
+    /*método responsable de la creación de los elementos de la GUI*/
+    private void crearElementosGUI() {
+
+        textAceletacion = new TextView(this);
+        textAceletacion.setTextSize(TypedValue.COMPLEX_UNIT_SP, tamanoLetraResolucionIncluida);
+        textAceletacion.setGravity(Gravity.CENTER);
+        String marca_aceleracion = "ACELERACION \n -20 a +20";//con salto de línea
+        textAceletacion.setTextColor(Color.BLACK);
+        textAceletacion.setText(marca_aceleracion);
+
+        textVelocidad = new TextView(this);
+        textVelocidad.setTextSize(TypedValue.COMPLEX_UNIT_SP, tamanoLetraResolucionIncluida);
+        textVelocidad.setGravity(Gravity.CENTER);
+        textVelocidad.setTextColor(Color.BLACK);
+        String marca_velocidad = "VELOCIDAD \n 0 a +30";//con salto de línea
+        textVelocidad.setText(marca_velocidad);
+
+        textAngulo = new TextView(this);
+        textAngulo.setTextSize(TypedValue.COMPLEX_UNIT_SP, tamanoLetraResolucionIncluida);
+        textAngulo.setGravity(Gravity.CENTER);
+        textAngulo.setTextColor(Color.BLACK);
+        String marca_angulo = "ANGULO gra. \n -90 a +90 ";//con salto de línea
+        textAngulo.setText(marca_angulo);
+
+        seekBarAceleracion = new SeekBar(this);
+        seekBarAceleracion.setMax(40);
+        seekBarAceleracion.setProgress(10);//aceleración inicial -10
+        seekBarAceleracion.setScaleY(0.2f);
+        aceleracion = seekBarAceleracion.getProgress() - 20;
+        AlmacenDatosRAM.aceleracion=aceleracion;
+
+        seekarVelocidadInicial = new SeekBar(this);
+        seekarVelocidadInicial.setMax(30);
+        seekarVelocidadInicial.setProgress(20);//velocidad inicial 20
+        seekarVelocidadInicial.setScaleY(0.2f);
+        velocidadInicial = seekarVelocidadInicial.getProgress();
+        AlmacenDatosRAM.vInicial=velocidadInicial;
+        AlmacenDatosRAM.velocidad=velocidadInicial;
+
+        seekBarAngulo = new SeekBar(this);
+        seekBarAngulo.setMax(180);
+        seekBarAngulo.setProgress(150);//ángulo inicial -30
+        seekBarAngulo.setScaleY(0.2f);
+        angulo = seekBarAngulo.getProgress()-90;
+        AlmacenDatosRAM.angulo = angulo;
+
+
+        botonEmpezar = new Button(this);
+        botonEmpezar.setTextSize(TypedValue.COMPLEX_UNIT_SP, tamanoLetraResolucionIncluida);
+        botonEmpezar.setText("EMPEZAR");
+        botonEmpezar.getBackground().setColorFilter(Color.argb(180, 250, 170, 50), PorterDuff.Mode.MULTIPLY);
+
+        botonPausar = new Button(this);
+        botonPausar.setTextSize(TypedValue.COMPLEX_UNIT_SP, tamanoLetraResolucionIncluida);
+        botonPausar.setText("PAUSAR");
+        botonPausar.getBackground().setColorFilter(Color.argb(180, 250, 170, 50), PorterDuff.Mode.MULTIPLY);
+        botonPausar.setEnabled(false);
+
+
+        //creación del objeto Pizarra
+        pizarra = new Pizarra(this);
+        //color del tablero
+        pizarra.setBackgroundColor(Color.WHITE);
+        pizarra.setSistemaCoordenadas(CR.pcApxX(40f),CR.pcApxY(60f),1, -1);
+
+        crearObjetosLaboratorio();
+
+        estadoInicial();
+
+    }
+
+    /*método responsable de administrar el diseño de la GUI*/
+    private LinearLayout crearGUI() {
+
+        LinearLayout linearPrincipal = new LinearLayout(this);
+        linearPrincipal.setOrientation(LinearLayout.HORIZONTAL);
+        linearPrincipal.setBackgroundColor(Color.BLACK);
+        linearPrincipal.setWeightSum(10.0f);
+
+
+        //linear secudario izquierda
+        LinearLayout linearIzquierda = new LinearLayout(this);
+        //linearIzquierda.setWeightSum(1.0f);
+
+
+        //linear secudario derecha
+        LinearLayout linearDerecha = new LinearLayout(this);
+        linearDerecha.setOrientation(LinearLayout.VERTICAL);
+        linearDerecha.setBackgroundColor(Color.YELLOW);
+        linearDerecha.setWeightSum(8.0f);
+
+
+        //pegar estos secundarios al principal
+        LinearLayout.LayoutParams parametrosPegadoIzquierda = new LinearLayout.LayoutParams(0, android.view.ViewGroup.LayoutParams.MATCH_PARENT);
+        //parametrosPegadoIzquierda.setMargins(0, 5, 0, 5);
+        //ocupará el 80% de linear_principal
+        parametrosPegadoIzquierda.weight = 8.5f;
+        linearPrincipal.addView(linearIzquierda, parametrosPegadoIzquierda);
+
+        //pegar la pizarra al linearIzquierdo
+        //linearIzquierda.setOrientation(LinearLayout.VERTICAL);
+        linearIzquierda.addView(pizarra);
+
+
+        //pegar estos secundarios al princial
+        LinearLayout.LayoutParams parametrosPegadoDerecha = new LinearLayout.LayoutParams(0, android.view.ViewGroup.LayoutParams.MATCH_PARENT);
+        //ocupará el 20% de linear_principal
+        parametrosPegadoDerecha.setMargins(0, 5, 0, 5);
+        parametrosPegadoDerecha.weight = 1.5f;
+        linearPrincipal.addView(linearDerecha, parametrosPegadoDerecha);
+
+
+        //pegar componentes a lineardDerecha.
+        linearDerecha.setOrientation(LinearLayout.VERTICAL);
+        LinearLayout.LayoutParams parametrosPegadoComponentes = new LinearLayout.LayoutParams(android.view.ViewGroup.LayoutParams.MATCH_PARENT, 0);
+        //ocupará el 10% de linear_principal
+        parametrosPegadoComponentes.setMargins(5, 5, 5, 5);
+        parametrosPegadoComponentes.weight = 1.0f;
+
+
+        linearDerecha.addView(textAngulo, parametrosPegadoComponentes);
+        linearDerecha.addView(seekBarAngulo, parametrosPegadoComponentes);
+        linearDerecha.addView(textVelocidad, parametrosPegadoComponentes);
+        linearDerecha.addView(seekarVelocidadInicial, parametrosPegadoComponentes);
+        linearDerecha.addView(textAceletacion, parametrosPegadoComponentes);
+        linearDerecha.addView(seekBarAceleracion, parametrosPegadoComponentes);
+        linearDerecha.addView(botonEmpezar, parametrosPegadoComponentes);
+        linearDerecha.addView(botonPausar, parametrosPegadoComponentes);
+
+        return linearPrincipal;
+
+
+    }//fin gui
+
+
+    private void eventos() {
+
+        //evento botones
+        botonEmpezar.setOnClickListener(new View.OnClickListener() {
+
+            public void onClick(View v) {
+
+
+                if (botonEmpezar.getText() == "EMPEZAR") {
+
+                    AlmacenDatosRAM.NUEVO=false;
+                    //para que la bolita deje el trazo de su trayectoria
+                    //desde su posición inicial
+                    i=-1;
+                    hilo.pausa = false;
+                    botonEmpezar.setText("NUEVO");
+                    seekBarAceleracion.setEnabled(false);
+                    seekBarAngulo.setEnabled(false);
+                    seekarVelocidadInicial.setEnabled(false);
+                    botonPausar.setEnabled(true);
+                    hilo.tiempo = 0;
+                    botonPausar.setText("PAUSAR");
+
+                } else {
+
+                    AlmacenDatosRAM.NUEVO=true;
+                    botonEmpezar.setText("EMPEZAR");
+                    seekBarAceleracion.setEnabled(true);
+                    seekBarAngulo.setEnabled(true);
+                    seekarVelocidadInicial.setEnabled(true);
+                    botonPausar.setEnabled(false);
+                    estadoInicial();
+                    hilo.pausa = true;
+
+                }
+
+            }
+
+        });
+
+
+        //evento del boton activar
+        botonPausar.setOnClickListener(new View.OnClickListener() {
+
+            public void onClick(View v) {
+
+                if (botonPausar.getText() == "PAUSAR") {
+
+                    botonPausar.setText("CONTINUAR");
+                    hilo.pausa = true;
+
+                } else {
+
+
+                    botonPausar.setText("PAUSAR");
+                    hilo.pausa = false;
+
+                }
+
+
+            }
+
+        });
+
+
+
+        //eventos seekbar
+
+        // seek_bar_velocidad_inicial
+        seekarVelocidadInicial.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
+            int progressChanged = 0;
+
+            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
+
+                int progressChanged = progress;
+                velocidadInicial = progressChanged;//0 el valor mínimo
+                //nuevas condiciones iniciales de la escena
+                estadoInicial();
+
+
+            }
+
+            public void onStartTrackingTouch(SeekBar seekBar) {
+                // TODO Auto-generated method stub
+            }
+
+            public void onStopTrackingTouch(SeekBar seekBar) {
+
+            }
+
+        });
+
+        // seek_bar_angulo
+        seekBarAngulo.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
+            int progressChanged = 0;
+
+            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
+                int progressChanged = progress;
+
+                //-90 será el valor mínimo y +90 el valor máximo
+                angulo = progressChanged -90;
+
+                //condiciones iniciales de la animación
+                estadoInicial();
+
+
+
+            }
+
+            public void onStartTrackingTouch(SeekBar seekBar) {
+                // TODO Auto-generated method stub
+
+            }
+
+            public void onStopTrackingTouch(SeekBar seekBar) {
+
+            }
+
+        });
+
+
+        // seek_bar_aceleración
+        seekBarAceleracion.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
+            int progressChanged = 0;
+
+            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
+                progressChanged = progress;
+
+                //-20 será el valor mínimo y +20 el máximo
+                aceleracion = (progressChanged) - 20;
+                estadoInicial();
+
+            }
+
+            public void onStartTrackingTouch(SeekBar seekBar) {
+                // TODO Auto-generated method stub
+            }
+
+            public void onStopTrackingTouch(SeekBar seekBar) {
+
+            }
+
+        });
+
+    }
+
+    private void crearObjetosLaboratorio() {
+
+        //origen en pixeles
+        float origenX_en_pixeles = CR.pcApxX(10);
+        float origenY_en_pixeles = CR.pcApxY(50);
+        //almacenar origen en pixeles
+        AlmacenDatosRAM.origenX_en_pixeles = origenX_en_pixeles;
+        AlmacenDatosRAM.origenY_en_pixeles = origenY_en_pixeles;
+
+        //posición inicial en pixeles
+        //posición en pixeles en coordenadas pantalla
+        float xi_en_pixeles = CR.pcApxX(0);
+        float yi_en_pixeles = CR.pcApxY(0);
+        //almacenar en pixeles
+        AlmacenDatosRAM.xi_en_pixeles = xi_en_pixeles;
+        AlmacenDatosRAM.yi_en_pixeles = yi_en_pixeles;
+
+        //crear eje x
+        ejeX = new Flecha(0, 0, CR.pcApxL(30f));
+        ejeX.setColor(Color.BLACK);
+        ejeX.setGrosorLinea(CR.pcApxL(0.5f));
+        objetos[0] = ejeX;
+
+        //crear eje y
+        ejeY = new Flecha(0, 0, CR.pcApxL(30f));
+        ejeY.setColor(Color.BLACK);
+        ejeY.setGrosorLinea(CR.pcApxL(0.5f));
+        ejeY.rotar(90);
+        objetos[1] = ejeY;
+
+        //los vectores inicialmente longitud cero
+        vectAceleracion = new Flecha(xi_en_pixeles, yi_en_pixeles, CR.pcApxL(1.0f));
+        vectAceleracion.setGrosorLinea(CR.pcApxL(0.5f));
+         /*
+         factor de amplificación de la longitud del vector
+         para ver de buen tamaño el vector
+         */
+        float factor_aceleracion = CR.pcApxL(1.5f);
+        vectAceleracion.setLongitud(factor_aceleracion * AlmacenDatosRAM.aceleracion);
+        vectAceleracion.setColor(Color.BLUE);
+        vectAceleracion.rotar(90);
+        objetos[2] = vectAceleracion;
+
+        //crear velocidad
+        vectVelocidad = new Flecha(xi_en_pixeles, yi_en_pixeles, CR.pcApxL(1.0f));
+        vectVelocidad.setGrosorLinea(CR.pcApxL(0.5f));
+        //float anguloVelocidadGrados = (float) Math.toDegrees(angulo);//AlmacenDatosRAM.anguloVelocidad);
+        vectVelocidad.rotar(angulo);//anguloVelocidadGrados);
+         /*
+         factor de amplificación de la longitud del vector
+         para ver de buen tamaño el vector
+         */
+        float factor_velocidad = CR.pcApxL(0.8f);
+        vectVelocidad.setLongitud(factor_velocidad * AlmacenDatosRAM.velocidad);
+        vectVelocidad.setColor(Color.RED);
+        objetos[3] = vectVelocidad;
+
+        //crear velocidad x
+        vectVelocidadX = new Flecha(xi_en_pixeles, yi_en_pixeles, CR.pcApxL(1.0f));
+        vectVelocidadX.setGrosorLinea(CR.pcApxL(0.5f));
+        vectVelocidadX.setLongitud(factor_velocidad * AlmacenDatosRAM.velocidadX);
+        vectVelocidadX.setColor(Color.MAGENTA);
+        objetos[4] = vectVelocidadX;
+
+        //crear velocidad y
+        vectVelocidadY = new Flecha(xi_en_pixeles, yi_en_pixeles, CR.pcApxL(1.0f));
+        vectVelocidadY.setGrosorLinea(CR.pcApxL(0.5f));
+        vectVelocidadY.setLongitud(factor_velocidad * AlmacenDatosRAM.velocidadY);
+        vectVelocidadY.setColor(Color.rgb(0, 128, 0));
+        vectVelocidadY.rotar(-90);
+        objetos[5] = vectVelocidadY;
+
+        //crear bola
+        bolita = new Particula(xi_en_pixeles, yi_en_pixeles, CR.pcApxL(10.0f));
+        bolita.setRadio(CR.pcApxL(2f));
+        bolita.setColor(Color.rgb(200, 0, 0));
+        objetos[6] = bolita;
+
+        //marcar ejes
+        marcaEjeX = new Marca("Eje X",  CR.pcApxX(10f),  CR.pcApxY(4f));
+        marcaEjeX.setTamano(CR.pcApxL(3f));
+        objetos[7] = marcaEjeX;
+
+        //marcar ejes
+        marcaEjeY = new Marca("Eje Y",  - CR.pcApxX(2f),  CR.pcApxY(25f));
+        marcaEjeY.setTamano(CR.pcApxL(3f));
+        marcaEjeY.rotar(-90f);
+        objetos[8] = marcaEjeY;
+
+        //estado inicial de la escena
+        pizarra.setEstadoEscena(objetos);
+
+    }
+
+    public void cambiarEstadosEscenaPizarra() {
+
+        //se obtienen los valores de las variables
+        float x_en_pixeles = AlmacenDatosRAM.x_en_pixeles;
+        float y_en_pixeles = AlmacenDatosRAM.y_en_pixeles;
+        float v = AlmacenDatosRAM.velocidad;
+        float vX = AlmacenDatosRAM.velocidadX;
+        float vY = AlmacenDatosRAM.velocidadY;
+        float anguloVelocidad = AlmacenDatosRAM.anguloVelocidad;//en radianes
+        float a = AlmacenDatosRAM.aceleracion;
+
+        //actualizar la escena
+        vectVelocidad.setPosicion(x_en_pixeles, y_en_pixeles);
+        float factor_velocidad = CR.pcApxL(0.8f);
+        vectVelocidad.setLongitud(factor_velocidad * v);
+        //el ángulo está en radianes y se debe convertir a grados
+        vectVelocidad.rotar((float) Math.toDegrees(anguloVelocidad));
+
+        vectVelocidadX.setLongitud(factor_velocidad * vX);
+        vectVelocidadX.setPosicion(x_en_pixeles, y_en_pixeles);
+
+        vectVelocidadY.setLongitud(factor_velocidad * vY);
+        vectVelocidadY.setPosicion(x_en_pixeles, y_en_pixeles);
+        vectVelocidadY.rotar(90);
+
+        float factor_aceleracion = CR.pcApxL(1.5f);
+        vectAceleracion.setLongitud(factor_aceleracion * a);
+        vectAceleracion.setPosicion(x_en_pixeles, y_en_pixeles);
+
+        bolita.setPosicion(x_en_pixeles, y_en_pixeles);
+        bolita.setColorTrayectoria(Color.rgb(250, 180, 0));
+        i = i + 1;//necesario para ir dibujando la trayectoria
+        bolita.setTrayectoria(true, i);
+        bolita.setGrosorLinea(CR.pcApxL(0.6f));
+
+    }
+
+    private void estadoInicial(){
+
+        AlmacenDatosRAM.aceleracion = aceleracion;
+        AlmacenDatosRAM.angulo = angulo;
+        AlmacenDatosRAM.vInicial = velocidadInicial;
+        AlmacenDatosRAM.velocidad= velocidadInicial;
+        AlmacenDatosRAM.velocidadX = (float)(velocidadInicial*Math.cos(Math.toRadians(angulo)));
+        AlmacenDatosRAM.velocidadY = (float)(velocidadInicial*Math.sin(Math.toRadians(angulo)));
+
+        float x_i= AlmacenDatosRAM.xi_en_pixeles;
+        float y_i= AlmacenDatosRAM.yi_en_pixeles;
+        i=-1;
+        bolita.borrarDatos();
+        bolita.setPosicion(x_i, y_i);
+        vectAceleracion.setPosicion(x_i,y_i);
+        /*
+         factor de amplificación de la longitud del vector
+         para ver de buen tamaño el vector
+         */
+        float factor_aceleracion = CR.pcApxL(1.5f);
+        vectAceleracion.setLongitud(factor_aceleracion*aceleracion);
+        /*
+         factor de amplificación de la longitud del vector
+         para ver de buen tamaño el vector
+         */
+        float factor_velocidad = CR.pcApxL(0.8f);
+        vectVelocidad.setLongitud(factor_velocidad * velocidadInicial);
+        vectVelocidad.setPosicion(x_i, y_i);
+        vectVelocidad.rotar(angulo);
+        //borrar las componentes
+        vectVelocidadX.setLongitud(0f);
+        vectVelocidadY.setLongitud(0f);
+
+    }
+
 }
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"GRADLE\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/.idea/gradle.xml	(date 1679108150037)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
Index: ../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/actividades_secundarias/HiloAnimacion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaseptimaapp.actividades_secundarias;public class HiloAnimacion {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/actividades_secundarias/HiloAnimacion.java b/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/actividades_secundarias/HiloAnimacion.java
--- a/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/actividades_secundarias/HiloAnimacion.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/actividades_secundarias/HiloAnimacion.java	(date 1678770948306)
@@ -1,2 +1,61 @@
-package com.curso_simulaciones.mivigesimaseptimaapp.actividades_secundarias;public class HiloAnimacion {
+package com.curso_simulaciones.mivigesimaseptimaapp.actividades_secundarias;
+
+import com.curso_simulaciones.mivigesimaseptimaapp.datos.AlmacenDatosRAM;
+import com.github.mikephil.charting.data.Entry;
+
+public class HiloAnimacion extends Thread {
+
+
+    public boolean corriendo;
+    private long periodo_muestreo = 500;
+    public float tiempo = 0;
+    public int contador = 0;
+
+
+    private ActividadDesplegadoraDatos actividad;
+
+
+    public HiloAnimacion(ActividadDesplegadoraDatos actividad) {
+
+        this.actividad =actividad;
+
+    }
+
+
+
+
+    @Override
+    public void run() {
+        corriendo = true;
+        while (corriendo) {
+
+
+            try {
+                Thread.sleep(periodo_muestreo);
+
+                //graficador.setDatos(AlmacenDatosRAM.datos);
+                AlmacenDatosRAM.datos.add((new Entry(tiempo, AlmacenDatosRAM.datoActual)));
+                actividad.graficador.setDatos(AlmacenDatosRAM.datos);
+
+                tiempo = tiempo + 0.001f * periodo_muestreo;//en segundos
+
+                //se desplegarán sólo 21 datos (podrían ser muchos más)
+                if (contador > 20) {
+                    corriendo = false;
+                }
+
+                //numero datos
+                contador = contador + 1;
+
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+
+            }
+
+        }
+
+
+    }
+
+
 }
Index: ../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/ActividadPrincipalMiVigesimaTerceraApp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaterceraapp;public class ActividadPrincipalMiVigesimaTerceraApp {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/ActividadPrincipalMiVigesimaTerceraApp.java b/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/ActividadPrincipalMiVigesimaTerceraApp.java
--- a/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/ActividadPrincipalMiVigesimaTerceraApp.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/ActividadPrincipalMiVigesimaTerceraApp.java	(date 1678766122151)
@@ -1,2 +1,215 @@
-package com.curso_simulaciones.mivigesimaterceraapp;public class ActividadPrincipalMiVigesimaTerceraApp {
+package com.curso_simulaciones.mivigesimaterceraapp;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.util.DisplayMetrics;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+
+import com.curso_simulaciones.mivigesimaterceraapp.controlador.ActividadControladora;
+import com.curso_simulaciones.mivigesimaterceraapp.datos.AlmacenDatosRAM;
+import com.curso_simulaciones.mivigesimaterceraapp.utilidades.Boton;
+
+public class ActividadPrincipalMiVigesimaTerceraApp extends Activity {
+
+    private int tamanoLetraResolucionIncluida;
+
+    private Boton entrar, salir;
+
+    private ImageView imagen;
+
+
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+
+        gestionarResolucion();
+
+        //Creación elementosGUI
+        creacionElementosGui();
+
+
+        ViewGroup.LayoutParams linear_layou_principal = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+        this.setContentView(crearGUI(), linear_layou_principal);
+
+
+        eventos();
+
+
+    }//fin onCreate
+
+
+
+
+    /*Método auxiliar para asuntos de resolución*/
+    private void gestionarResolucion() {
+
+        //independencia de la resolución de la pantalla
+        DisplayMetrics displayMetrics = this.getApplicationContext().getResources().getDisplayMetrics();
+        int alto = displayMetrics.heightPixels;
+        int ancho = displayMetrics.widthPixels;
+        int dimensionReferencia;
+
+        //tomar el menor valor entre alto y ancho de pantalla
+        if (alto > ancho) {
+
+            dimensionReferencia = ancho;
+        } else {
+
+            dimensionReferencia = alto;
+        }
+
+
+        //una estimación de un buen tamaño
+        int tamanoLetra = dimensionReferencia / 20;
+
+
+        //tamano de letra para usar acomodado a la resolución de pantalla
+        tamanoLetraResolucionIncluida = (int) (tamanoLetra / displayMetrics.scaledDensity);
+
+        //guardar en el almacen de datos para que otras clases la accedan fácilmente
+        AlmacenDatosRAM.tamanoLetraResolucionIncluida = tamanoLetraResolucionIncluida;
+
+        //guardar en almacen annho y alto de pantalla
+        AlmacenDatosRAM.ancho_pantalla =ancho;
+        AlmacenDatosRAM.alto_pantalla =alto;
+
+    }
+
+    //Creación elementosGUI
+    private void creacionElementosGui() {
+
+        //aceptar = new Button(this);
+        entrar = new Boton(this);
+        entrar.setImagen(R.drawable.entrar);
+        entrar.setText(" ");
+
+        salir = new Boton(this);
+        salir.setImagen(R.drawable.salir);
+        salir.setText(" ");
+
+        imagen=new ImageView(this);
+        imagen.setImageResource(R.drawable.imagen_entrada_app_23);
+
+    }
+
+    private LinearLayout crearGUI(){
+
+        //LinearLayoutPrincipal
+        LinearLayout linear_layout_principal  = new LinearLayout(this);
+        linear_layout_principal.setOrientation(LinearLayout.VERTICAL);
+        linear_layout_principal.setGravity(Gravity.CENTER_HORIZONTAL);
+        linear_layout_principal.setGravity(Gravity.FILL);
+        linear_layout_principal.setBackgroundColor(Color.WHITE);
+        linear_layout_principal.setWeightSum(10);
+
+        //LinearLayout primera fila
+        LinearLayout linear_layout_primera_fila = new LinearLayout(this);
+        linear_layout_primera_fila.setOrientation(LinearLayout.HORIZONTAL);
+        linear_layout_primera_fila.setGravity(Gravity.FILL);
+        linear_layout_primera_fila.setBackgroundColor(Color.WHITE);
+        LinearLayout.LayoutParams parametros_primera_fila = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0);//ViewGroup.LayoutParams.WRAP_CONTENT);
+        parametros_primera_fila.weight = 8.0f;
+        linear_layout_primera_fila.setLayoutParams(parametros_primera_fila);
+
+        //LinearLayout segunda fila
+        LinearLayout linear_layout_segunda_fila = new LinearLayout(this);
+        linear_layout_segunda_fila.setOrientation(LinearLayout.HORIZONTAL);
+        linear_layout_segunda_fila.setGravity(Gravity.FILL);
+        LinearLayout.LayoutParams parametros_segunda_fila = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,0);// ViewGroup.LayoutParams.WRAP_CONTENT);
+        parametros_segunda_fila.weight = 2.0f;
+        linear_layout_segunda_fila.setWeightSum(2);
+        linear_layout_segunda_fila.setLayoutParams(parametros_segunda_fila);
+
+        //Adicionar a la primera fila la imagen
+        LinearLayout.LayoutParams parametros_pegado_imagen = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+        linear_layout_primera_fila.setGravity(Gravity.CENTER);
+        imagen.setLayoutParams(parametros_pegado_imagen);
+        linear_layout_primera_fila.addView(imagen);
+
+        //pegado botones abajo
+        LinearLayout.LayoutParams parametros_pegado_boton = new LinearLayout.LayoutParams(0, android.view.ViewGroup.LayoutParams.MATCH_PARENT);
+        parametros_pegado_boton.weight = 1.0f;
+        int borde= 10;
+        parametros_pegado_boton.setMargins(borde,borde,borde,borde);
+        entrar.setLayoutParams(parametros_pegado_boton);
+        salir.setLayoutParams(parametros_pegado_boton);
+        linear_layout_segunda_fila.addView(entrar);
+        linear_layout_segunda_fila.addView(salir);
+
+        linear_layout_principal.addView(linear_layout_primera_fila);
+        linear_layout_principal.addView(linear_layout_segunda_fila);
+
+        return linear_layout_principal;
+
+    }
+
+
+    private void eventos(){
+
+        //evento
+        entrar.setOnClickListener(new View.OnClickListener() {
+
+            public void onClick(View v) {
+
+                lanzarEntrar();
+
+            }
+        });
+
+        salir.setOnClickListener(new View.OnClickListener() {
+
+            public void onClick(View v) {
+
+                lanzarSalir();
+
+
+            }
+        });
+
+
+    }
+
+    private void lanzarEntrar(){
+
+        Intent intent = new Intent(this, ActividadControladora.class);
+        startActivity(intent);
+
+    }
+
+
+    private void lanzarSalir(){
+
+        this.finish();
+
+    }
+
+
+
+
+    @Override
+    protected void onStop() {
+        //..
+        super.onStop();
+    }
+
+    @Override
+    protected void onRestart() {
+        super.onRestart();
+        //...
+
+    }
+
+    @Override
+    protected void onDestroy() {
+        finish();
+        super.onDestroy();
+    }
+
+
 }
Index: ../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/ActividadPrincipalMiVigesimaSeptimaApp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaseptimaapp;public class ActividadPrincipalMiVigesimaSeptimaApp {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/ActividadPrincipalMiVigesimaSeptimaApp.java b/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/ActividadPrincipalMiVigesimaSeptimaApp.java
--- a/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/ActividadPrincipalMiVigesimaSeptimaApp.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/ActividadPrincipalMiVigesimaSeptimaApp.java	(date 1678771133593)
@@ -1,2 +1,182 @@
-package com.curso_simulaciones.mivigesimaseptimaapp;public class ActividadPrincipalMiVigesimaSeptimaApp {
-}
+package com.curso_simulaciones.mivigesimaseptimaapp;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.graphics.Color;
+import android.graphics.drawable.Drawable;
+import android.hardware.Sensor;
+import android.hardware.SensorManager;
+import android.os.Bundle;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+import android.widget.Toast;
+
+import com.curso_simulaciones.mivigesimaseptimaapp.actividades_secundarias.ActividadDesplegadoraDatos;
+import com.curso_simulaciones.mivigesimaseptimaapp.utilidades.Boton;
+
+public class ActividadPrincipalMiVigesimaSeptimaApp extends Activity {
+
+
+    private Boton consultar, salir;
+
+
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        //para crear elementos de la GUI
+        crearElementosGUI();
+
+        /*
+        Para informar cómo se debe pegar el administrador de
+        diseño LinearLayout obtenido con el método crearGui()
+        */
+        ViewGroup.LayoutParams parametro_layout_principal = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+
+
+        //pegar el contenedor con la GUI
+        this.setContentView(crearGUI(), parametro_layout_principal);
+
+        existenciaSensor();
+
+        eventos();
+
+
+    }//fin del método onCreate
+
+
+    private void crearElementosGUI() {
+
+        consultar = new Boton(this);
+        consultar.setImagen(R.drawable.consultar);
+
+        salir = new Boton(this);
+        salir.setImagen(R.drawable.salir);
+
+    }
+
+
+    /*método responsable de administrar el diseño de la GUI*/
+    private LinearLayout crearGUI() {
+
+
+        LinearLayout linear_layout_principal = new LinearLayout(this);
+        linear_layout_principal.setOrientation(LinearLayout.VERTICAL);
+        linear_layout_principal.setGravity(Gravity.CENTER_HORIZONTAL);
+        linear_layout_principal.setGravity(Gravity.FILL);
+        linear_layout_principal.setBackgroundColor(Color.WHITE);
+        linear_layout_principal.setWeightSum(10);
+
+
+        //LinearLayout primera fila
+        LinearLayout linear_layout_primera_fila = new LinearLayout(this);
+        linear_layout_primera_fila.setOrientation(LinearLayout.HORIZONTAL);
+        linear_layout_primera_fila.setGravity(Gravity.FILL);
+        linear_layout_primera_fila.setBackgroundColor(Color.WHITE);
+        LinearLayout.LayoutParams parametros_primera_fila = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0);//ViewGroup.LayoutParams.WRAP_CONTENT);
+        parametros_primera_fila.weight = 8.0f;
+        linear_layout_primera_fila.setLayoutParams(parametros_primera_fila);
+
+
+        //fondo primera fila
+        Drawable fondo = getResources().getDrawable(R.drawable.imagen_entrada_app_27);
+        linear_layout_primera_fila.setBackgroundDrawable(fondo);
+
+        //LinearLayout segunda fila
+        LinearLayout linear_layout_segunda_fila = new LinearLayout(this);
+        linear_layout_segunda_fila.setOrientation(LinearLayout.HORIZONTAL);
+        linear_layout_segunda_fila.setGravity(Gravity.FILL);
+        LinearLayout.LayoutParams parametros_segunda_fila = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0);
+        parametros_segunda_fila.weight = 2.0f;
+        linear_layout_segunda_fila.setWeightSum(2.0f);
+        linear_layout_segunda_fila.setLayoutParams(parametros_segunda_fila);
+
+
+        LinearLayout.LayoutParams parametros_pegado_boton = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.MATCH_PARENT);
+        parametros_pegado_boton.weight = 1.0f;
+        consultar.setLayoutParams(parametros_pegado_boton);
+        salir.setLayoutParams(parametros_pegado_boton);
+        linear_layout_segunda_fila.addView(consultar);
+        linear_layout_segunda_fila.addView(salir);
+
+
+        linear_layout_principal.addView(linear_layout_primera_fila);
+        linear_layout_principal.addView(linear_layout_segunda_fila);
+
+
+        return linear_layout_principal;
+
+
+    }
+
+
+    private void eventos() {
+
+        consultar.setOnClickListener(new View.OnClickListener() {
+
+            public void onClick(View v) {
+
+
+                lanzarDatos();
+
+
+            }
+        });
+
+        salir.setOnClickListener(new View.OnClickListener() {
+
+            public void onClick(View v) {
+
+                finish();
+            }
+        });
+
+
+    }
+
+
+    private void lanzarDatos() {
+
+        Intent intent = new Intent(this, ActividadDesplegadoraDatos.class);
+        startActivity(intent);
+
+    }
+
+
+    //preguntar si el sensor existe
+    private boolean existenciaSensor() {
+
+        boolean existe = false;
+        SensorManager sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
+
+        if (sensorManager.getDefaultSensor(Sensor.TYPE_LIGHT) != null) {
+
+            existe = true;
+
+
+        } else {
+
+            desplegarAviso();
+
+        }
+
+        return existe;
+    }
+
+    private void desplegarAviso() {
+
+        Toast toast = Toast.makeText(getApplicationContext(), "SU DISPOSITIVO NO POSEE LUXOMETRO", Toast.LENGTH_SHORT);
+        toast.show();
+
+    }
+
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        finish();
+    }
+
+}
+
Index: ../MiVigesimaSextaApp/app/src/main/java/com/curso_simulaciones/mivigesimasextaapp/ActividadPrincipalMiVigesimaSextaApp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimasextaapp;public class ActividadPrincipalMiVigesimaSextaApp {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../MiVigesimaSextaApp/app/src/main/java/com/curso_simulaciones/mivigesimasextaapp/ActividadPrincipalMiVigesimaSextaApp.java b/../MiVigesimaSextaApp/app/src/main/java/com/curso_simulaciones/mivigesimasextaapp/ActividadPrincipalMiVigesimaSextaApp.java
--- a/../MiVigesimaSextaApp/app/src/main/java/com/curso_simulaciones/mivigesimasextaapp/ActividadPrincipalMiVigesimaSextaApp.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../MiVigesimaSextaApp/app/src/main/java/com/curso_simulaciones/mivigesimasextaapp/ActividadPrincipalMiVigesimaSextaApp.java	(date 1678769795702)
@@ -1,2 +1,320 @@
-package com.curso_simulaciones.mivigesimasextaapp;public class ActividadPrincipalMiVigesimaSextaApp {
+package com.curso_simulaciones.mivigesimasextaapp;
+
+import android.app.Activity;
+import android.content.Context;
+import android.graphics.Color;
+import android.hardware.Sensor;
+import android.hardware.SensorManager;
+import android.os.Bundle;
+import android.text.method.ScrollingMovementMethod;
+import android.util.DisplayMetrics;
+import android.util.TypedValue;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+public class ActividadPrincipalMiVigesimaSextaApp extends Activity {
+
+    private TextView textView;
+
+    //variable tamaño de las letras basado en resolución de pantalla
+    private int tamanoLetraResolucionIncluida;
+
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+
+        //gestionar la resolución
+        gestionarResolucion();
+
+        //para crear elementos de la GUI
+        crearElementosGUI();
+
+        //para informar cómo se debe pegar el adminitrador de
+        //diseño obtenido con el método GUI
+        ViewGroup.LayoutParams parametroLayoutPrincipal = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+
+
+        //pegar el contenedor con la GUI
+        this.setContentView(crearGUI(), parametroLayoutPrincipal);
+
+
+
+
+        detectarSensores();
+
+
+    }//fin onCreate
+
+
+
+    /*Método auxiliar para asuntos de resolución*/
+    private void gestionarResolucion() {
+
+        //independencia de la resolución de la pantalla
+        DisplayMetrics displayMetrics = this.getApplicationContext().getResources().getDisplayMetrics();
+        int alto = displayMetrics.heightPixels;
+        int ancho = displayMetrics.widthPixels;
+
+        /*
+         Tamaño de las letras con independencia de
+         tamaño y resolución de pantalla
+        */
+        int dimensionReferencia;
+
+        //tomar el menor entre alto y ancho de pantalla
+        if(alto>ancho){
+
+            dimensionReferencia=ancho;
+        }
+
+        else {
+
+            dimensionReferencia=alto;
+        }
+
+
+        //una estimación de un buen tamaño
+        int tamanoLetra= dimensionReferencia / 25;
+
+        //tamano de letra para usar acomodado a la resolución de pantalla
+        tamanoLetraResolucionIncluida = (int) (tamanoLetra / displayMetrics.scaledDensity);
+
+    }
+
+
+    /*método responsable de la creación de los elementos de la GUI*/
+    private void crearElementosGUI() {
+
+        textView= new TextView(this);
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, tamanoLetraResolucionIncluida);
+        //darle la propiedad de tener el scrolling
+        textView.setMovementMethod(new ScrollingMovementMethod());
+
+
+    }//fin crearElementosGUI
+
+
+    /*método responsable de administrar el diseño de la GUI*/
+    private LinearLayout crearGUI() {
+
+        //el linear principal
+        LinearLayout linearPrincipal = new LinearLayout(this);
+        linearPrincipal.setOrientation(LinearLayout.VERTICAL);
+        linearPrincipal.setBackgroundColor(Color.BLACK);
+
+
+        linearPrincipal.addView(textView);
+
+
+        return linearPrincipal;
+
+
+    }//fin gui
+
+    /*
+      Los sensores más importantes de dispositivos android son:
+      Aceleración (TYPE_ACCELEROMETER)
+      Temperatura ambiente (TYPE_AMBIENT_TEMPERATURE)
+      Gravedad (TYPE_GRAVITY)
+      Giróscopo (TYPE_GYROSCOPE)
+      Iluminacia (TYPE_LIGHT)
+      Aceleración Lineal (TYPE_LINEAR_ACCELERATION)
+      Campo magnético (TYPE_MAGNETIC_FIELD)
+      Orientación (TYPE_ORIENTATION)
+      prsión atmosférica (TYPE_PRESSURE)
+      Proximidad (TYPE_PROXIMITY)
+      Humedad Relativa (TYPE_RELATIVE_HUMIDITY)
+      Temperaura del dispositivo (TYPE_TEMPERATURE)
+     */
+
+    /*
+      Se detectará la presencia de los sensores anteriores
+      e información básica acerca de ellos
+     */
+
+    public void detectarSensores() {
+
+        //Instancia de SensorManger
+        SensorManager sensorManager = (SensorManager)getSystemService(Context.SENSOR_SERVICE);
+
+        Sensor sensor=null;
+
+        //Lista con la información de los sensores
+        // List<Sensor> listSensor  = sensorManager.getSensorList(Sensor.TYPE_ALL);
+
+        if(sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER) !=null) {
+            sensor=sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
+            setInformacioSensor(sensor);
+        }
+
+        if(sensorManager.getDefaultSensor(Sensor.TYPE_AMBIENT_TEMPERATURE) !=null) {
+            sensor=sensorManager.getDefaultSensor(Sensor.TYPE_AMBIENT_TEMPERATURE);
+            setInformacioSensor(sensor);
+        }
+
+        if(sensorManager.getDefaultSensor(Sensor.TYPE_GRAVITY) !=null) {
+            sensor=sensorManager.getDefaultSensor(Sensor.TYPE_GRAVITY);
+            setInformacioSensor(sensor);
+        }
+
+        if(sensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE) !=null) {
+            sensor=sensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE);
+            setInformacioSensor(sensor);
+        }
+
+        if(sensorManager.getDefaultSensor(Sensor.TYPE_LIGHT) !=null) {
+            sensor=sensorManager.getDefaultSensor(Sensor.TYPE_LIGHT);
+            setInformacioSensor(sensor);
+        }
+
+
+        if(sensorManager.getDefaultSensor(Sensor.TYPE_LINEAR_ACCELERATION) !=null) {
+            sensor=sensorManager.getDefaultSensor(Sensor.TYPE_LINEAR_ACCELERATION);
+            setInformacioSensor(sensor);
+        }
+
+        if(sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD) !=null) {
+            sensor=sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
+            setInformacioSensor(sensor);
+        }
+
+        if(sensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION) !=null) {
+            sensor=sensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION);
+            setInformacioSensor(sensor);
+        }
+
+        if(sensorManager.getDefaultSensor(Sensor.TYPE_PRESSURE) !=null) {
+            sensor=sensorManager.getDefaultSensor(Sensor.TYPE_PRESSURE);
+            setInformacioSensor(sensor);
+        }
+
+        if(sensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY) !=null) {
+            sensor=sensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);
+            setInformacioSensor(sensor);
+        }
+
+        if(sensorManager.getDefaultSensor(Sensor.TYPE_RELATIVE_HUMIDITY) !=null) {
+            sensor=sensorManager.getDefaultSensor(Sensor.TYPE_RELATIVE_HUMIDITY);
+            setInformacioSensor(sensor);
+        }
+
+        if(sensorManager.getDefaultSensor(Sensor.TYPE_TEMPERATURE) !=null) {
+            sensor=sensorManager.getDefaultSensor(Sensor.TYPE_TEMPERATURE);
+            setInformacioSensor(sensor);
+        }
+
+
+    }
+
+
+    private void setInformacioSensor(Sensor sensor){
+
+        String unidades=" "+getUnidades(sensor.getType());
+        textView.append("\n" + " Nombre:" +(sensor.getName()));
+        textView.append("\n" + " Corriente: "+ sensor.getPower()+ " mA") ;
+        textView.append("\n" + " Máximo delay: "+sensor.getMaxDelay()+ " μs");
+        textView.append("\n" + " Mínimo delay: "+ sensor.getMinDelay()+ " μs");
+        textView.append("\n" + " Máximo rango: " +sensor.getMaximumRange()+ unidades);
+        textView.append("\n" + " Resolución: "+sensor.getResolution()+ unidades);
+        textView.append("\n" + " Vendedor: "+ sensor.getVendor());
+        textView.append("\n" + " Versión: "+sensor.getVersion());
+        textView.append("\n" + " ");
+
+
+    }
+
+    private String getUnidades(int tipoSensor ){
+
+        String unidades="";
+
+        if(tipoSensor==Sensor.TYPE_ACCELEROMETER) {
+
+            unidades="m/s^2";
+
+        }
+
+        if(tipoSensor==Sensor.TYPE_GRAVITY) {
+
+            unidades="m/s^2";
+
+        }
+
+        if(tipoSensor==Sensor.TYPE_AMBIENT_TEMPERATURE) {
+
+            unidades="°C";
+
+        }
+
+        if(tipoSensor==Sensor.TYPE_GYROSCOPE) {
+
+            unidades="rad/s";
+
+        }
+
+        if(tipoSensor==Sensor.TYPE_MAGNETIC_FIELD) {
+
+            unidades="μT";
+
+        }
+
+
+        if(tipoSensor==Sensor.TYPE_LIGHT) {
+
+            unidades="lx";
+
+        }
+
+        if(tipoSensor==Sensor.TYPE_RELATIVE_HUMIDITY) {
+
+            unidades="%";
+
+        }
+
+        if(tipoSensor==Sensor.TYPE_LINEAR_ACCELERATION) {
+
+            unidades="m/s^2";
+
+        }
+
+        if(tipoSensor==Sensor.TYPE_PROXIMITY) {
+
+            unidades="cm";
+
+        }
+
+        if(tipoSensor==Sensor.TYPE_PRESSURE) {
+
+            unidades="hPa";
+
+        }
+
+        if(tipoSensor==Sensor.TYPE_TEMPERATURE) {
+
+            unidades="°C";
+
+        }
+
+        if(tipoSensor==Sensor.TYPE_ORIENTATION) {
+
+            unidades="°";
+
+        }
+
+
+
+
+        return unidades;
+
+    }
+
+    public void onDestroy() {
+
+        super.onDestroy();
+        finish();
+
+    }
+
+
+
 }
Index: ../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/vista/CR.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimacuartaapp.vista;public class CR {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/vista/CR.java b/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/vista/CR.java
--- a/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/vista/CR.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/vista/CR.java	(date 1678767923214)
@@ -1,2 +1,137 @@
-package com.curso_simulaciones.mivigesimacuartaapp.vista;public class CR {
+package com.curso_simulaciones.mivigesimacuartaapp.vista;
+
+public class CR {
+    public static float anchoPizarra;
+    public static float altoPizarra;
+
+
+    public CR(){
+
+    }
+
+
+    /**
+     * Método para convertir porcentaje de
+     * posición en X a pixeles.
+     * @param pcX
+     * @return
+     */
+    public static float pcApxX(float pcX) {
+
+        float pxX = pcX * anchoPizarra / 100f;
+
+        return pxX;
+
+    }
+
+
+
+
+    /**
+     * Método para convertir porcentaje de
+     * posición en Y a pixeles.
+     * @param pcY
+     * @return
+     */
+    public static float pcApxY(float pcY) {
+
+        float pxY = pcY * altoPizarra / 100f;
+
+        return pxY;
+
+    }
+
+
+    /**
+     * Dada una longitud pcL en porcentaje
+     * referido al menor entre el ancho
+     * y el alto de Pizarra la convierte a una
+     * longitud en pixeles.
+     * @param pcL
+     * @return
+     */
+    public static float pcApxL(float pcL) {
+
+        float pxL = 0;
+
+        if (anchoPizarra > altoPizarra) {
+
+            pxL = pcL * altoPizarra / 100f;
+
+
+        } else {
+
+            pxL = pcL * anchoPizarra / 100f;
+        }
+
+
+        return pxL;
+
+    }
+
+
+
+    /**
+     * Convierte pixeles de uan posicón en
+     * X a porcentaje.
+     * @param pxX
+     * @return
+     */
+    public static float  pxXApc(float pxX) {
+
+        float pcX = pxX * 100f / anchoPizarra;
+
+        return pcX;
+
+    }
+
+
+
+    /**
+     * Convierte pixeles de una posición en
+     * Y a porcentaje.
+     * @param pxY
+     * @return
+     */
+    public static float  pxYApc(float pxY) {
+
+        float pcY = pxY * 100f / altoPizarra;
+
+        return pcY;
+
+    }
+
+
+    /*Convierte pixeles referidas
+      al menor entre el ancho y el
+      alto en porcentaje
+  */
+
+    /**
+     * Dada una longitud pxL en pixeles la
+     * convierte a porcentaje referido al menor entre
+     * el ancho y el alto.
+     * Pizarra.
+     * @param pxL
+     * @return
+     */
+    public static float pxApcL(float pxL) {
+
+        float pcL = 0;
+
+        if (CR.anchoPizarra > altoPizarra) {
+
+            pcL = pxL * 100f/ altoPizarra ;
+
+
+        } else {
+
+            pcL = pxL * 100f/ anchoPizarra;
+        }
+
+
+        return pcL;
+
+    }
+
 }
Index: ../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/ActividadPrincipalMiVigesimaCuartaApp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimacuartaapp;public class ActividadPrincipalMiVigesimaCuartaApp {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/ActividadPrincipalMiVigesimaCuartaApp.java b/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/ActividadPrincipalMiVigesimaCuartaApp.java
--- a/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/ActividadPrincipalMiVigesimaCuartaApp.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/ActividadPrincipalMiVigesimaCuartaApp.java	(date 1678768118905)
@@ -1,2 +1,211 @@
-package com.curso_simulaciones.mivigesimacuartaapp;public class ActividadPrincipalMiVigesimaCuartaApp {
+package com.curso_simulaciones.mivigesimacuartaapp;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.graphics.Color;
+import android.graphics.drawable.Drawable;
+import android.os.Bundle;
+import android.util.DisplayMetrics;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+
+import com.curso_simulaciones.mivigesimacuartaapp.controlador.ActividadControladora;
+import com.curso_simulaciones.mivigesimacuartaapp.datos.AlmacenDatosRAM;
+import com.curso_simulaciones.mivigesimacuartaapp.utilidades.Boton;
+
+public class ActividadPrincipalMiVigesimaCuartaApp extends Activity {
+
+    private int tamanoLetraResolucionIncluida;
+
+    private Boton entrar, salir;
+
+
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+
+        gestionarResolucion();
+
+        //Creación elementosGUI
+        creacionElementosGui();
+
+
+        ViewGroup.LayoutParams linear_layou_principal = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+        this.setContentView(crearGUI(), linear_layou_principal);
+
+
+        eventos();
+
+
+    }//fin onCreate
+
+
+
+
+    /*Método auxiliar para asuntos de resolución*/
+    private void gestionarResolucion() {
+
+        //independencia de la resolución de la pantalla
+        DisplayMetrics displayMetrics = this.getApplicationContext().getResources().getDisplayMetrics();
+        int alto = displayMetrics.heightPixels;
+        int ancho = displayMetrics.widthPixels;
+        int dimensionReferencia;
+
+        //tomar el menor valor entre alto y ancho de pantalla
+        if (alto > ancho) {
+
+            dimensionReferencia = ancho;
+        } else {
+
+            dimensionReferencia = alto;
+        }
+
+
+        //una estimación de un buen tamaño
+        int tamanoLetra = dimensionReferencia / 20;
+
+
+        //tamano de letra para usar acomodado a la resolución de pantalla
+        tamanoLetraResolucionIncluida = (int) (tamanoLetra / displayMetrics.scaledDensity);
+
+        //guardar en el almacen de datos para que otras clases la accedan fácilmente
+        AlmacenDatosRAM.tamanoLetraResolucionIncluida = tamanoLetraResolucionIncluida;
+
+        //guardar en almacen annho y alto de pantalla:
+        //este cálculo está con dispoitivo móvil
+        //en orientación portrait
+        AlmacenDatosRAM.ancho_pantalla =ancho;
+        AlmacenDatosRAM.alto_pantalla =alto;
+
+    }
+
+    //Creación elementosGUI
+    private void creacionElementosGui() {
+
+        //aceptar = new Button(this);
+        entrar = new Boton(this);
+        entrar.setImagen(R.drawable.entrar);
+        entrar.setText(" ");
+
+        salir = new Boton(this);
+        salir.setImagen(R.drawable.salir);
+        salir.setText(" ");
+
+
+
+    }
+
+    private LinearLayout crearGUI(){
+
+        //LinearLayoutPrincipal
+        LinearLayout linear_layout_principal  = new LinearLayout(this);
+        linear_layout_principal.setOrientation(LinearLayout.VERTICAL);
+        linear_layout_principal.setGravity(Gravity.CENTER_HORIZONTAL);
+        linear_layout_principal.setGravity(Gravity.FILL);
+        linear_layout_principal.setBackgroundColor(Color.WHITE);
+        linear_layout_principal.setWeightSum(10);
+
+        //fondo primera fila
+        Drawable fondo = getResources().getDrawable(R.drawable.imagen_entrada_app_24);
+
+        //LinearLayout primera fila
+        LinearLayout linear_layout_primera_fila = new LinearLayout(this);
+        linear_layout_primera_fila.setOrientation(LinearLayout.HORIZONTAL);
+        linear_layout_primera_fila.setGravity(Gravity.FILL);
+        linear_layout_primera_fila.setBackgroundColor(Color.WHITE);
+        LinearLayout.LayoutParams parametros_primera_fila = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0);//ViewGroup.LayoutParams.WRAP_CONTENT);
+        parametros_primera_fila.weight = 8.0f;
+        linear_layout_primera_fila.setLayoutParams(parametros_primera_fila);
+        linear_layout_primera_fila.setBackgroundDrawable(fondo);
+
+        //LinearLayout segunda fila
+        LinearLayout linear_layout_segunda_fila = new LinearLayout(this);
+        linear_layout_segunda_fila.setOrientation(LinearLayout.HORIZONTAL);
+        linear_layout_segunda_fila.setGravity(Gravity.FILL);
+        LinearLayout.LayoutParams parametros_segunda_fila = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,0);// ViewGroup.LayoutParams.WRAP_CONTENT);
+        parametros_segunda_fila.weight = 2.0f;
+        linear_layout_segunda_fila.setWeightSum(2);
+        linear_layout_segunda_fila.setLayoutParams(parametros_segunda_fila);
+
+
+
+        //pegado botones abajo
+        LinearLayout.LayoutParams parametros_pegado_boton = new LinearLayout.LayoutParams(0, android.view.ViewGroup.LayoutParams.MATCH_PARENT);
+        parametros_pegado_boton.weight = 1.0f;
+        int borde= 10;
+        parametros_pegado_boton.setMargins(borde,borde,borde,borde);
+        entrar.setLayoutParams(parametros_pegado_boton);
+        salir.setLayoutParams(parametros_pegado_boton);
+        linear_layout_segunda_fila.addView(entrar);
+        linear_layout_segunda_fila.addView(salir);
+
+        linear_layout_principal.addView(linear_layout_primera_fila);
+        linear_layout_principal.addView(linear_layout_segunda_fila);
+
+        return linear_layout_principal;
+
+    }
+
+
+    private void eventos(){
+
+        //evento
+        entrar.setOnClickListener(new View.OnClickListener() {
+
+            public void onClick(View v) {
+
+                lanzarEntrar();
+
+            }
+        });
+
+        salir.setOnClickListener(new View.OnClickListener() {
+
+            public void onClick(View v) {
+
+                lanzarSalir();
+
+
+            }
+        });
+
+
+    }
+
+
+    private void lanzarEntrar(){
+
+        Intent intent = new Intent(this, ActividadControladora.class);
+        startActivity(intent);
+
+    }
+
+
+    private void lanzarSalir(){
+
+        this.finish();
+
+    }
+
+    @Override
+    protected void onStop() {
+        //..
+        super.onStop();
+    }
+
+    @Override
+    protected void onRestart() {
+        super.onRestart();
+        //...
+
+    }
+
+    @Override
+    protected void onDestroy() {
+        finish();
+        super.onDestroy();
+    }
+
 }
Index: ../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/controlador/ActividadControladora.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaterceraapp.controlador;public class ActividadControladora {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/controlador/ActividadControladora.java b/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/controlador/ActividadControladora.java
--- a/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/controlador/ActividadControladora.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/controlador/ActividadControladora.java	(date 1678766049803)
@@ -1,2 +1,634 @@
-package com.curso_simulaciones.mivigesimaterceraapp.controlador;public class ActividadControladora {
+package com.curso_simulaciones.mivigesimaterceraapp.controlador;
+
+import android.app.Activity;
+import android.graphics.Color;
+import android.graphics.PorterDuff;
+import android.os.Bundle;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.LinearLayout;
+import android.widget.SeekBar;
+import android.widget.TextView;
+
+import com.curso_simulaciones.mivigesimaterceraapp.datos.AlmacenDatosRAM;
+import com.curso_simulaciones.mivigesimaterceraapp.vista.CR;
+import com.curso_simulaciones.mivigesimaterceraapp.vista.Pizarra;
+import com.curso_simulaciones.simulphysics.objetos_laboratorio.Cuerda;
+import com.curso_simulaciones.simulphysics.objetos_laboratorio.CuerpoRectangular;
+import com.curso_simulaciones.simulphysics.objetos_laboratorio.Flecha;
+import com.curso_simulaciones.simulphysics.objetos_laboratorio.Marca;
+import com.curso_simulaciones.simulphysics.objetos_laboratorio.Masa;
+import com.curso_simulaciones.simulphysics.objetos_laboratorio.ObjetoLaboratorio;
+import com.curso_simulaciones.simulphysics.objetos_laboratorio.Polea;
+import com.curso_simulaciones.simulphysics.objetos_laboratorio.Regla;
+
+public class ActividadControladora extends Activity {
+
+    //variable tamaño de las letras basado en resolución de pantalla
+    private int tamanoLetraResolucionIncluida;
+
+    private Pizarra pizarra;
+    //Objetos GUI necesarios
+    private TextView text_m1, text_m2;
+    private SeekBar seek_bar_m1, seek_bar_m2;
+    private Button boton_empezar, boton_pausar;
+
+
+    //valores de las variables
+    private float m1 = 15;
+    private float m2 = 10;
+
+    //valores iniciales puntos escena
+    //centros de masa de las masas
+    private float x1_pixeles, x2_pixeles, y1_pixeles, y2_pixeles;
+    //centros de masa de las poleas
+    private float xp1_pixeles, xp2_pixeles, yp1_pixeles, yp2_pixeles;
+    //radio de las poleas
+    private float radio;
+
+    //dimensiones de los bloques
+    private float ancho_bloque, alto_bloque;
+
+
+    private Masa masa_1, masa_2;
+    private Polea polea_1, polea_2;
+    private Flecha flecha_x, flecha_y, flecha_2, flecha_3;
+    private Regla regla_1, regla_2;
+    private CuerpoRectangular barra;
+    private Cuerda cuerda_1, cuerda_2, cuerda_3, cuerda_4;
+    private Marca marca;
+
+    private ObjetoLaboratorio[] objetos = new ObjetoLaboratorio[20];
+
+    //hilo responsable de controlar la animación
+    private HiloAnimacion hilo;
+
+
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+
+        gestionarResolucion();
+
+
+        //para crear elementos de la GUI
+        crearElementosGUI();
+
+        //para informar cómo se debe pegar el adminitrador de
+        //diseño obtenido con el método GUI
+        ViewGroup.LayoutParams parametro_layout_principal = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+
+
+        //pegar el contenedor con la GUI
+        this.setContentView(crearGUI(), parametro_layout_principal);
+
+        //hilo que administrador los cálculos
+        hilo = new HiloAnimacion(this);
+        hilo.start();
+
+
+        //para administrar los eventos
+        eventos();
+
+
+    }//fin onCreate
+
+    /*Método auxiliar para asuntos de resolución*/
+    private void gestionarResolucion() {
+
+        tamanoLetraResolucionIncluida = (int) (0.8f * AlmacenDatosRAM.tamanoLetraResolucionIncluida);
+        /*
+        Según el diseño de la GUI se puede anticipar cuál es la
+        dimensión de la pizarra. En este caso es el 80% del ancho
+        de la pantalla y el 100% del alto de la misma
+        El cálculo del alto y el ancho de la pantalla
+        se hizo en la clase principal con el móvil
+        en portrait y aquí estamos en posición lanscape.
+        Por tanto troquemos alto por ancho y viceversa
+        */
+        CR.anchoPizarra = 0.80f* AlmacenDatosRAM.alto_pantalla;
+        CR.altoPizarra = AlmacenDatosRAM.ancho_pantalla;
+
+
+    }
+
+    /*método responsable de la creación de los elementos de la GUI*/
+    private void crearElementosGUI() {
+
+        text_m1 = new TextView(this);
+        text_m1.setTextSize(TypedValue.COMPLEX_UNIT_SP, tamanoLetraResolucionIncluida);
+        text_m1.setGravity(Gravity.CENTER);
+        String marca_m1 = "MASA M1 \n 5 a 25 kg";//con salto de línea
+        text_m1.setTextColor(Color.BLACK);
+        text_m1.setText(marca_m1);
+
+        text_m2 = new TextView(this);
+        text_m2.setTextSize(TypedValue.COMPLEX_UNIT_SP, tamanoLetraResolucionIncluida);
+        text_m2.setGravity(Gravity.CENTER);
+        text_m2.setTextColor(Color.BLACK);
+        String marca_m2 = "MASA M2 \n 5 a 25 kg ";//con salto de línea
+        text_m2.setText(marca_m2);
+
+
+        seek_bar_m1 = new SeekBar(this);
+        seek_bar_m1.setMax(20);
+        seek_bar_m1.setProgress(15);//masa m1 inicial 15
+        AlmacenDatosRAM.m1 = 15;
+        seek_bar_m1.setScaleY(0.5f);
+
+
+        seek_bar_m2 = new SeekBar(this);
+        seek_bar_m2.setMax(20);
+        seek_bar_m2.setProgress(10);//masa m2 inicial 510
+        AlmacenDatosRAM.m2 = 10;
+        seek_bar_m2.setScaleY(0.5f);
+
+
+        boton_empezar = new Button(this);
+        boton_empezar.setTextSize(TypedValue.COMPLEX_UNIT_SP, tamanoLetraResolucionIncluida);
+        boton_empezar.setText("EMPEZAR");
+
+
+        boton_empezar.getBackground().setColorFilter(Color.rgb(220, 156, 80), PorterDuff.Mode.MULTIPLY);
+
+        boton_pausar = new Button(this);
+        boton_pausar.setTextSize(TypedValue.COMPLEX_UNIT_SP, tamanoLetraResolucionIncluida);
+        boton_pausar.setText("PAUSAR");
+
+        boton_pausar.getBackground().setColorFilter(Color.rgb(220, 156, 80), PorterDuff.Mode.MULTIPLY);
+        boton_pausar.setEnabled(false);
+
+
+        //crear pizarra sabiendo de antemano sus dimensiones
+        pizarra = new Pizarra(this);
+        pizarra.setBackgroundColor(Color.WHITE);
+        pizarra.setSistemaCoordenadas(CR.pcApxX(60f),CR.pcApxY(10f),1, 1);
+
+        crearObjetosLaboratorio();
+
+    }//fin crearElementosGUI
+
+
+    /*método responsable de administrar el diseño de la GUI*/
+    private LinearLayout crearGUI() {
+
+        //el linear principal
+        LinearLayout linear_principal = new LinearLayout(this);
+        linear_principal.setOrientation(LinearLayout.HORIZONTAL);
+        linear_principal.setWeightSum(10.0f);
+
+        //linear secudario izquierda
+        LinearLayout linear_izquierda = new LinearLayout(this);
+        linear_izquierda.setWeightSum(1.0f);
+
+        //linear secudario derecha
+        LinearLayout linear_derecha = new LinearLayout(this);
+        linear_derecha.setBackgroundColor(Color.YELLOW);
+        linear_derecha.setWeightSum(6.0f);
+
+
+        //pegar estos secundarios al princial
+        LinearLayout.LayoutParams parametros_pegado_izquierdo = new LinearLayout.LayoutParams(0, android.view.ViewGroup.LayoutParams.MATCH_PARENT);
+        //ocupará el 80% de linear_principal
+        parametros_pegado_izquierdo.weight = 8.0f;
+        linear_principal.addView(linear_izquierda, parametros_pegado_izquierdo);
+
+        //pegar estos secundarios al princial
+        LinearLayout.LayoutParams parametros_pegado_derecho = new LinearLayout.LayoutParams(0, android.view.ViewGroup.LayoutParams.MATCH_PARENT);
+        //ocupará el 20% de linear_principal
+        parametros_pegado_derecho.weight = 2.0f;
+        linear_principal.addView(linear_derecha, parametros_pegado_derecho);
+
+
+        //pegar comonentes a linear_derecha.
+        //ojo: el cero va a la derecha ya que se agregaran verticalmente
+        linear_derecha.setOrientation(LinearLayout.VERTICAL);
+        LinearLayout.LayoutParams parametros_pegado_componentes = new LinearLayout.LayoutParams(android.view.ViewGroup.LayoutParams.MATCH_PARENT, 0);
+        //ocupará el 80% de linear_principal
+        parametros_pegado_componentes.setMargins(5, 5, 5, 5);
+        parametros_pegado_componentes.weight = 1.0f;
+
+        linear_derecha.addView(text_m1, parametros_pegado_componentes);
+        linear_derecha.addView(seek_bar_m1, parametros_pegado_componentes);
+
+        linear_derecha.addView(text_m2, parametros_pegado_componentes);
+        linear_derecha.addView(seek_bar_m2, parametros_pegado_componentes);
+        linear_derecha.addView(boton_empezar, parametros_pegado_componentes);
+        linear_derecha.addView(boton_pausar, parametros_pegado_componentes);
+
+        //pegar la pizarra al linear izquierdo
+        linear_izquierda.setOrientation(LinearLayout.VERTICAL);
+        linear_izquierda.addView(pizarra);
+
+
+        return linear_principal;
+    }//fin gui
+
+    private void eventos() {
+
+        //evento botones
+        boton_empezar.setOnClickListener(new View.OnClickListener() {
+
+            public void onClick(View v) {
+
+
+                if (boton_empezar.getText() == "EMPEZAR") {
+
+                    // hilo.pausa = false;
+                    hilo.pausa = false;
+                    seek_bar_m2.setEnabled(false);
+                    seek_bar_m1.setEnabled(false);
+                    boton_empezar.setText("NUEVO");
+                    boton_pausar.setText("PAUSAR");
+                    boton_pausar.setEnabled(true);
+
+                } else {
+
+
+                    //hilo.pausa=true;
+                    hilo.pausa = true;
+                    seek_bar_m2.setEnabled(true);
+                    seek_bar_m1.setEnabled(true);
+                    boton_empezar.setText("EMPEZAR");
+                    boton_pausar.setEnabled(false);
+                    // detener();
+                    // hilo = null;
+
+
+                }
+
+            }
+
+
+        });
+
+
+        //evento del boton activar
+        boton_pausar.setOnClickListener(new View.OnClickListener() {
+
+            public void onClick(View v) {
+
+
+                if (boton_pausar.getText() == "PAUSAR") {
+
+                    boton_pausar.setText("CONTINUAR");
+                    hilo.pausa = true;
+
+                } else {
+
+
+                    boton_pausar.setText("PAUSAR");
+                    hilo.pausa = false;
+
+                }
+
+            }
+
+        });
+
+
+
+        //eventos seekbar
+
+        // seek_bar_m1
+        seek_bar_m1.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
+            int progressChanged = 0;
+
+            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
+
+                int progressChanged = progress;
+                m1 =5 + progressChanged;//5 será el valor mínimo
+
+                actualizarValoresIniciales();
+
+
+            }
+
+            public void onStartTrackingTouch(SeekBar seekBar) {
+                // TODO Auto-generated method stub
+            }
+
+            public void onStopTrackingTouch(SeekBar seekBar) {
+
+            }
+
+        });
+
+        // seek_bar_m2
+        seek_bar_m2.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
+            int progressChanged = 0;
+
+            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
+                int progressChanged = progress;
+
+                m2 = 5+progressChanged;//5 será el valor mínimo
+
+                actualizarValoresIniciales();
+
+            }
+
+            public void onStartTrackingTouch(SeekBar seekBar) {
+                // TODO Auto-generated method stub
+
+            }
+
+            public void onStopTrackingTouch(SeekBar seekBar) {
+
+            }
+
+        });
+
+    }
+
+
+    /*
+    Crea los objetos cuerpo rígido con su estado inicia
+    -X esta en porcentaje del annco del canvas
+    -Y está en porcentaje del alto del canvas
+    -Cualquier otra dimensión está en porcentaje del menor
+     entre el alto y el ancho del canvas
+    */
+    private void crearObjetosLaboratorio() {
+
+        /*
+          coordenadas iniciales
+          de puntos básicos y
+          dimensiones de los elementos
+        */
+
+        //radio de las poleas
+        radio= CR.pcApxL(5);
+        //almacenar valor del radio
+        AlmacenDatosRAM.radio= radio;
+
+        //dimensiones de cada masa: m1 y m2
+        ancho_bloque= 2*radio;
+        alto_bloque=radio;
+
+        //coordenadas de las masas
+        //abscisa y ordenada del centro de m1
+        x1_pixeles= radio;
+        y1_pixeles= CR.pcApxY(50f);
+        //almacenar las coordenadas iniciales de m1
+        AlmacenDatosRAM.x1_en_pixeles=x1_pixeles;
+        AlmacenDatosRAM.yi1_en_pixeles = y1_pixeles;
+
+        //abscisa y ordenada del centro de m2
+        x2_pixeles= -2*radio;
+        y2_pixeles=CR.pcApxY(50f);
+        //almacenar las coordenadas iniciales de m2
+        AlmacenDatosRAM.x2_en_pixeles=x2_pixeles;
+        AlmacenDatosRAM.yi2_en_pixeles = y2_pixeles;
+
+        //coordenadas de las poleas
+        //abscisa y ordenada del centro de la polea 1
+        xp1_pixeles=0;
+        yp1_pixeles=0;
+        //abscisa y ordenada del centro de la polea 2
+        xp2_pixeles= -2*radio;
+        yp2_pixeles= y2_pixeles - 3*radio;
+
+        /*
+        Creación de objetos físicos y dibujo del
+        estado inicial de la escena física
+       */
+        //dos poleas
+        //polea 1 (polea azul)
+        polea_1=new Polea(xp1_pixeles,yp1_pixeles,radio);
+        polea_1.setColor(Color.BLUE);
+        polea_1.setGrosorLinea(CR.pcApxL(0.5f));
+        polea_1.setSoportePolea(true);
+        polea_1.rotarEje(180);
+        objetos[0]=polea_1;
+
+
+        //polea 2 (polea roja)
+        polea_2=new Polea(xp2_pixeles,yp2_pixeles,radio);
+        polea_2.setColor(Color.RED);
+        polea_2.setGrosorLinea(CR.pcApxL(0.5f));
+        objetos[1]=polea_2;
+
+
+
+        //barra superior que sostiene el sistema
+        barra=new CuerpoRectangular(CR.pcApxX(0),CR.pcApxY(-10),CR.pcApxL(40),CR.pcApxL(2));
+        objetos[2]=barra;
+
+
+        //4  cuerdas
+        cuerda_1=new Cuerda(xp2_pixeles+radio,yp1_pixeles, xp2_pixeles+radio,yp2_pixeles);
+        cuerda_1.setColor(Color.BLACK);
+        cuerda_1.setGrosorLinea(CR.pcApxL(0.5f));
+        objetos[3]=cuerda_1;
+
+        cuerda_2=new Cuerda(xp2_pixeles-radio,CR.pcApxY(-9f),xp2_pixeles-radio,yp2_pixeles);
+        cuerda_2.setColor(Color.BLACK);
+        cuerda_2.setGrosorLinea(CR.pcApxL(0.5f));
+        objetos[4]=cuerda_2;
+
+        cuerda_3=new Cuerda(xp1_pixeles+radio,yp1_pixeles,xp1_pixeles+radio,y1_pixeles-0.5f*alto_bloque);
+        cuerda_3.setColor(Color.BLACK);
+        cuerda_3.setGrosorLinea(CR.pcApxL(0.5f));
+        objetos[5]=cuerda_3;
+
+        cuerda_4=new Cuerda(xp2_pixeles,yp2_pixeles+radio,xp2_pixeles,y2_pixeles-0.5f*alto_bloque);
+        cuerda_4.setColor(Color.BLACK);
+        cuerda_4.setGrosorLinea(CR.pcApxL(0.5f));
+        objetos[6]=cuerda_4;
+
+
+
+        //2 masas
+        //masa 2
+        masa_2=new Masa(x2_pixeles,y2_pixeles,ancho_bloque,alto_bloque);
+        masa_2.setColor(Color.YELLOW);
+        masa_2.setColorMarca(Color.BLACK);
+        masa_2.setMarca("M2");
+        objetos[7]=masa_2;
+
+
+        //masa 1
+        masa_1=new Masa(x1_pixeles,y1_pixeles,ancho_bloque,alto_bloque);
+        masa_1.setColor(Color.YELLOW);
+        masa_1.setColorMarca(Color.BLACK);
+        masa_1.setMarca("M1");
+        objetos[8]=masa_1;
+
+
+        //dos reglas
+        //regla 1
+        regla_1=new Regla(xp2_pixeles-2.5f*radio,CR.pcApxY(0),CR.pcApxL(83),1.5f*radio);
+        regla_1.setColor(Color.GREEN);
+        regla_1.setColorLetras(Color.BLACK);
+        regla_1.setNumeroDivisiones(20);
+        regla_1.rotar(90);
+        objetos[9]=regla_1;
+
+
+        //regla 2
+        regla_2=new Regla(xp1_pixeles+5f*radio,CR.pcApxY(0),CR.pcApxL(83),1.5f*radio);
+        regla_2.setColor(Color.GREEN);
+        regla_2.setColorLetras(Color.BLACK);
+        regla_2.setNumeroDivisiones(20);
+        regla_2.rotar(90);
+        objetos[10]=regla_2;
+
+        //tres flechas
+        //eje y
+        flecha_y=new Flecha(0,CR.pcApxY(0f), CR.pcApxL(10));
+        flecha_y.rotar(90);
+        objetos[11]=flecha_y;
+
+        //eje x
+        flecha_x=new Flecha(CR.pcApxX(0f),CR.pcApxY(0f), CR.pcApxL(10));
+        objetos[12]=flecha_x;
+
+
+        //flecha señaladora de regla derecha
+        flecha_2=new Flecha(x1_pixeles+0.5f*ancho_bloque,y1_pixeles,2f*radio);
+        flecha_2.setColor(Color.BLACK);
+        objetos[13]=flecha_2;
+
+        //flecha señaladora de regla izquierda
+        flecha_3=new Flecha(x2_pixeles-0.5f*ancho_bloque,y2_pixeles,2f*radio);
+        flecha_3.setColor(Color.BLACK);
+        flecha_3.rotar(180);
+        objetos[14]=flecha_3;
+
+
+        //marcas de lo ejes
+        //despliega el nombre del Eje y
+        marca=new Marca("y",0,2.8f*radio);
+        marca.setColor(Color.BLACK);
+        marca.setTamano(CR.pcApxL(3f));
+        objetos[15]=marca;
+        //despliega el nombre del Eje y
+        marca=new Marca("x",2.3f*radio,CR.pcApxY(1f));
+        marca.setColor(Color.BLACK);
+        marca.setTamano(CR.pcApxL(3f));
+        objetos[16]=marca;
+
+
+        //desplegar la escena inicial
+        pizarra.setEstadoEscena(objetos);
+
+
+    }
+
+
+    /*
+    Cambia el estado de movimiento de los cuerpos rígidos
+   -X esta en porcentaje del ancho del canvas
+   -Y está en porcentaje del alto del canvas
+   -Cualquier otra dimensión está en porcentaje del menor
+    entre el alto y el ancho del canvas
+   */
+    public void cambiarEstadosEscenaPizarra() {
+
+         /*
+          variables necesarias para actualizar la
+          escena física.
+         */
+
+
+        /*
+         Coordenadas de los centros de las masas:
+
+         Recoge los valores y1 y y2 calculados
+         en con la clase ModeloFisico.
+
+         Los valores x1 y x2 se mantienen constantes
+         y fueron asignados en la clase ActividadPrincipal
+         */
+
+        float x1_en_pixeles = AlmacenDatosRAM.x1_en_pixeles;
+        float y1_en_pixeles =  AlmacenDatosRAM.y1_en_pixeles;
+
+        float x2_en_pixeles = AlmacenDatosRAM.x2_en_pixeles;
+        float y2_en_pixeles = AlmacenDatosRAM.y2_en_pixeles;
+
+        /*
+         Desplazamiento angular de las poleas:
+
+         Recoge los valores de teta_1 y teaa_2
+         calculados con la clase ModeloFisico
+         */
+        float teta_1 =AlmacenDatosRAM.teta_1;
+        float teta_2 = AlmacenDatosRAM.teta_2;
+
+        /*
+          Coordenadas de la polea 2.
+          La polea 1 sólo rota
+
+         */
+        float xp2_en_pixeles = x2_en_pixeles;
+        float yp2_en_pixeles = y2_en_pixeles - 3 * radio;
+
+        /*
+          Ahora sí, actualizar la posición de los
+          objetos que se mueven
+        */
+        //mover las poleas
+        //mover polea_1
+        polea_1.mover(teta_1);
+        //mover polea_2
+        polea_2.mover(0, AlmacenDatosRAM.desplazamiento_m2_en_pixeles, teta_2);
+
+
+        //mover masa 1
+        masa_1.mover(0,AlmacenDatosRAM.desplazamiento_m1_en_pixeles);
+        masa_2.mover(0, AlmacenDatosRAM.desplazamiento_m2_en_pixeles);
+
+
+
+        // mover las flechas señaladoras y cuerdas
+        //mover flecha 2
+        y1_en_pixeles = y1_pixeles + AlmacenDatosRAM.desplazamiento_m1_en_pixeles;
+        flecha_2.setPosicion(x1_en_pixeles + 0.5f * ancho_bloque, y1_en_pixeles);
+        //mover la cuerda 3
+        cuerda_3.setPosicionFinal(x1_en_pixeles, y1_en_pixeles - 0.5f * alto_bloque);
+
+
+        //mover flecha 3
+        y2_en_pixeles = y2_pixeles + AlmacenDatosRAM.desplazamiento_m2_en_pixeles;
+        flecha_3.setPosicion(x2_en_pixeles - 0.5f * ancho_bloque, y2_en_pixeles);
+        //mover la cuerda 1
+        yp2_en_pixeles = yp2_pixeles + AlmacenDatosRAM.desplazamiento_m2_en_pixeles;
+        cuerda_1.setPosicionFinal(xp2_en_pixeles + radio, yp2_en_pixeles);
+        //mover la cuerda 2
+        cuerda_2.setPosicionFinal(xp2_en_pixeles - radio, yp2_en_pixeles);
+
+        //mover la cuerda 4
+        cuerda_4.setPosicionInicial(xp2_en_pixeles, yp2_en_pixeles + radio);
+        cuerda_4.setPosicionFinal(xp2_en_pixeles, y2_en_pixeles - 0.5f * alto_bloque);
+
+    }
+
+
+
+
+    private void actualizarValoresIniciales(){
+
+
+        AlmacenDatosRAM.m1=m1;
+        AlmacenDatosRAM.m2=m2;
+
+
+        float origenY_en_metros = 0.1f;
+        //almacenar
+        AlmacenDatosRAM.origenY_en_metros = origenY_en_metros;
+
+
+        //condiciones iniciales de posición
+        AlmacenDatosRAM.yi1_en_metros = 0.602f;
+        AlmacenDatosRAM.yi2_en_metros = 0.602f;
+
+
+    }
+
+
+
 }
Index: ../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/datos/AlmacenDatosRAM.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaseptimaapp.datos;public class AlmacenDatosRAM {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/datos/AlmacenDatosRAM.java b/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/datos/AlmacenDatosRAM.java
--- a/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/datos/AlmacenDatosRAM.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/datos/AlmacenDatosRAM.java	(date 1678770756284)
@@ -1,2 +1,19 @@
-package com.curso_simulaciones.mivigesimaseptimaapp.datos;public class AlmacenDatosRAM {
+package com.curso_simulaciones.mivigesimaseptimaapp.datos;
+
+import java.util.ArrayList;
+
+public class AlmacenDatosRAM {
+
+    public static float datoActual;
+
+    /*
+      ArrayList es una clase que permite almacenar
+      objetos con la diferencia respecto a los
+      arreglos [], que ella misma va cambiando
+      dinámicamente su tamaño a medida que se le
+      agregan elementos
+     */
+
+    public static ArrayList datos = new ArrayList<>();
+
 }
Index: ../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/GaugeSimple.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaseptimaapp.utilidades;public class GaugeSimple {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/GaugeSimple.java b/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/GaugeSimple.java
--- a/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/GaugeSimple.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/GaugeSimple.java	(date 1678770879151)
@@ -1,2 +1,437 @@
-package com.curso_simulaciones.mivigesimaseptimaapp.utilidades;public class GaugeSimple {
+package com.curso_simulaciones.mivigesimaseptimaapp.utilidades;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.RectF;
+import android.view.View;
+
+public class GaugeSimple extends View {
+
+    private float largo;
+    private float minimo = 0;
+    private float maximo = 100f;
+    private float medida = 0.0f;//tomar como medida inicial
+    private String unidades = "UNIDADES";
+
+    //color de los sectores
+    private int colorPrimerTercio = Color.rgb(200, 200, 0);
+    private int colorSegundoTercio = Color.rgb(0, 180, 0);
+    private int colorTercerTercio = Color.RED;
+
+    //color del marco
+    private int colorFondoTacometro = Color.rgb(240,240,240);
+    private int colorBordeTacometro= Color.BLACK;
+
+    //color franja dinámica
+    private int colorFranjaDinamica = Color.RED;
+
+
+    private int angPrimertercio = 100;
+    private int angSegundoTercio = 100;
+    private int angTercerTercio = 40;
+
+    private int colorLineas = Color.BLACK;
+    private int colorNumeros =Color.BLACK;
+
+    private int colorNumerosDesplieggue = Color.BLACK;
+
+    private int numeroDivisiones= 25;
+    private int separacionDivisionesGrandes = 5;
+
+
+    /**
+     * Constructor de GaugeSimple
+     */
+    public GaugeSimple(Context context) {
+
+        super(context);
+
+        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB) {
+            this.setLayerType(View.LAYER_TYPE_SOFTWARE, null);
+
+        }
+    }
+
+    /**
+     * Modifica el rango de medicion
+     * desde minimo hasta maximo
+     *
+     * @param minimo
+     * @param maximo
+     */
+    public void setRango(float minimo, float maximo) {
+
+        this.minimo = minimo;
+        this.maximo = maximo;
+
+    }
+
+    public void setSeparacionesDivisionesGrandes(int separacionDivisionesGrandes){
+
+        this.separacionDivisionesGrandes = separacionDivisionesGrandes;
+
+
+    }
+
+
+    private void setNumeroDivisiones(int numeroDivisiones){
+
+        this.numeroDivisiones =numeroDivisiones;
+
+
+    }
+
+
+    /**
+     * Modifica el valor medido
+     *
+     * @param medida
+     */
+    public void setMedida(float medida) {
+
+        this.medida = medida;
+
+    }
+
+
+    /**
+     * Regresa el valor medido
+     *
+     * @return medida
+     */
+    public float getMedida() {
+
+        return medida;
+    }
+
+
+    /**
+     * Modifica las unidades del instrumento virtual
+     *
+     * @param unidades
+     */
+    public void setUnidades(String unidades) {
+
+        this.unidades = unidades;
+
+    }
+
+    /**
+     * Modifica el color del borde del marco
+     * @param colorBordeMarco
+     */
+
+    public void setColorBordeTacometro(int colorBordeMarco){
+
+        this.colorBordeTacometro = colorBordeMarco;
+
+    }
+
+
+    /**
+     * Modifica los colores de los sectores circulares
+     *
+     * @param colorPrimerTercio
+     * @param colorSegundoTercio
+     * @param colorTercerTercio
+     */
+    public void setColorSectores(int colorPrimerTercio, int colorSegundoTercio, int colorTercerTercio) {
+
+        this.colorPrimerTercio = colorPrimerTercio;
+        this.colorSegundoTercio = colorSegundoTercio;
+        this.colorTercerTercio = colorTercerTercio;
+
+    }
+
+    /**
+     * Modifica los angulos de los sectores circulares
+     * Deben sumar 250 grados
+     *
+     * @param angPrimerTercio
+     * @param angSegundoTercio
+     * @param angTercerTercio
+     */
+    public void setAngulosSectores(int angPrimerTercio, int angSegundoTercio, int angTercerTercio) {
+        this.angPrimertercio = angPrimerTercio;
+        this.angSegundoTercio = angSegundoTercio;
+        this.angTercerTercio = angTercerTercio;
+
+    }
+
+
+
+    /**
+     * Modifica el color de fondo del tacometro
+     *
+     * @param colorFondoTacometro
+     */
+    public void setColorFondoTacometro(int colorFondoTacometro) {
+
+        this.colorFondoTacometro = colorFondoTacometro;
+
+
+    }
+
+
+    /**
+     * Modifica el color de las lineas del tacometro
+     *
+     * @param color_lineas
+     */
+    public void setColorLineasTacometro(int color_lineas) {
+
+        this.colorLineas = color_lineas;
+
+
+    }
+
+
+    public void setColorNumeros(int colorNumeros){
+
+        this.colorNumeros = colorNumeros;
+
+    }
+
+
+    /**
+     * Modifica el color del numero que se despliega
+     *
+     * @param colorNumerosDesplieggue
+     */
+
+    public void setColorNumeroDespliegue(int colorNumerosDesplieggue) {
+
+        this.colorNumerosDesplieggue = colorNumerosDesplieggue;
+
+    }
+
+
+    /**
+     * Modifica el color de la franja dinámica
+     * @param colorFranjaDinamica
+     */
+    public void setColorFranjaDinámica(int colorFranjaDinamica) {
+
+        this.colorFranjaDinamica = colorFranjaDinamica;
+
+
+    }
+
+
+    /**
+     * @param canvas
+     */
+
+    //método para dibujar
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+
+        /*
+        se graba el estado actual del canvas
+        para al final restaurarlo
+        */
+        canvas.save();
+
+
+         /*
+         La vista tendra las mismas dimensiones de su
+         contenedor
+         */
+        float ancho = this.getWidth();//ancho de la vista
+        float alto = this.getHeight();//alto de la vista
+
+        /*
+         Se define la variable largo como el 80%
+         del menor valor entre alto y largo del
+         contenedor
+         */
+
+        if (ancho > alto) {
+
+            largo = 0.8f * alto;
+
+        } else {
+
+            largo = 0.8f * ancho;
+
+
+        }
+
+        /*
+          se hace tralación del (0,0) al centro
+          del contenedor
+        */
+        canvas.translate(0.5f * ancho, 0.5f * alto);
+
+        //configurando el pincel
+        Paint pincel = new Paint();
+        //evita efecto sierra
+        pincel.setAntiAlias(true);
+        //tamaño texto
+        pincel.setTextSize(0.05f * largo);
+        //para mejor manejo de la métrica de texto
+        pincel.setLinearText(true);
+        //para efectos de buen escalado de bitmaps
+        pincel.setFilterBitmap(true);
+        //para buen manejo de gradientes de color
+        pincel.setDither(true);
+
+
+
+        //dibujar fondo del tacómetro
+        //marco borde: circulo no relleno
+        pincel.setStyle(Paint.Style.STROKE);
+        //grosor y color
+        pincel.setStrokeWidth(0.02f*largo);
+        pincel.setColor(colorBordeTacometro);
+        canvas.drawCircle(0, 0, 0.5f * largo, pincel);
+        //marco fondo: círculo relleno
+        pincel.setStyle(Paint.Style.FILL);
+        pincel.setColor(colorFondoTacometro);
+        canvas.drawCircle(0, 0, 0.48f * largo, pincel);
+
+
+
+        //dibujar los tres segementos circulares
+        float esquinaSuperiorIzquierdaX = -0.45f * largo;
+        float esquinaSuperiorIzquierdaY = -0.45f * largo;
+        float esquinaInferiorDerechaX = 0.45f * largo;
+        float esquinaInferiorDerechaY = 0.45f * largo;
+
+        RectF rect = new RectF(esquinaSuperiorIzquierdaX, esquinaSuperiorIzquierdaY,
+                esquinaInferiorDerechaX, esquinaInferiorDerechaY);
+
+        //grosor líneas
+        pincel.setStrokeWidth(0.02f*largo);
+        //arcos
+        pincel.setStyle(Paint.Style.STROKE);
+        pincel.setColor(colorPrimerTercio);
+        //con argumento false solo dibuja el arco y no el sector circular
+        canvas.drawArc(rect, 150, angPrimertercio, false, pincel);
+        pincel.setColor(colorSegundoTercio);
+        canvas.drawArc(rect, 150 + angPrimertercio, angSegundoTercio, false, pincel);
+        pincel.setColor(colorTercerTercio);
+        canvas.drawArc(rect, 150 + angPrimertercio + angSegundoTercio, angTercerTercio, false, pincel);
+
+
+        //dibujar la escala
+        float indent = (float) (0.05 * largo);
+        float posicionY = (float) (0.5 * largo);
+
+
+
+         /*
+         Divisiones grandes, pequeñas y números
+         Se dibuja primero la división vertical.
+         Luego se repite rotando de a 50 grados comenzando
+         en 235 grados.
+          */
+        pincel.setStyle(Paint.Style.FILL);
+
+
+        for (int i = 0; i < numeroDivisiones +1; i = i + 1) {//6
+            // float anguloRotacion = 235 + 50 * i;
+            float salto = 240f/numeroDivisiones;
+            //float anguloRotacion = 235 + 50 * i;
+            float anguloRotacion = 240 + salto * i;
+            canvas.save();
+            canvas.rotate(anguloRotacion, 0, 0);
+            pincel.setColor(colorLineas);
+
+            if(i%separacionDivisionesGrandes ==0) {
+                //dibujar líneas grandes
+                pincel.setStrokeWidth(0.01f * largo);
+                canvas.drawLine(0, -posicionY, 0, -posicionY + indent, pincel);
+
+                //dibujar los números
+                float valorIncrementoMarcas = (maximo - minimo) /numeroDivisiones;
+                int valorMarca = (int) (minimo + valorIncrementoMarcas * i);
+                String numero = "" + valorMarca;
+
+                //ancho de la cadena del número
+                float anchoCadenaNumero = pincel.measureText(numero);
+
+                //dibuja números rotados
+                //endereza los números a orientación horizontal
+                canvas.rotate(-anguloRotacion, 0, -posicionY + 2.5f * indent);
+                pincel.setColor(colorNumeros);
+                canvas.drawText(numero, -0.5f * anchoCadenaNumero, -posicionY + 2.5f * indent, pincel);
+            } else {
+                //divisiones pequeñas
+                pincel.setStrokeWidth(0.005f * largo);
+                canvas.drawLine(0, -posicionY, 0, -posicionY + (float) (0.6 * indent), pincel);
+
+            }
+
+            canvas.restore();
+
+        }
+
+        /*
+        dibujar la aguja
+        */
+        //aqui empieza dibujo de la aguja
+        //calcular angulo para ubicar la aguja de acuerdo al valor medido
+        float angulo_rotacion_medida = 240 + (240f / (maximo - minimo)) * (medida - minimo);
+        //Dibujar aguja
+        pincel.setStrokeWidth(0.005f * largo);
+        pincel.setColor(Color.RED);
+        canvas.rotate(angulo_rotacion_medida, 0, 0);
+        float b = (float) (1.5f* indent);
+        canvas.drawLine(0, -posicionY, 0, b, pincel);
+        canvas.rotate(-angulo_rotacion_medida, 0, 0);
+        pincel.setStyle(Paint.Style.FILL);
+        pincel.setColor(colorFondoTacometro);
+        canvas.drawCircle(0, 0, (float) (0.4 * indent), pincel);
+        pincel.setColor(Color.RED);
+        pincel.setStyle(Paint.Style.STROKE);
+        canvas.drawCircle(0, 0, (float) (0.4 * indent), pincel);
+        //aquí termina dibujo de la aguja
+
+
+
+
+        //franja dinámica
+        float a = (float) 0.03* largo;
+        rect = new RectF(esquinaSuperiorIzquierdaX - a, esquinaSuperiorIzquierdaY - a,
+                esquinaInferiorDerechaX + a, esquinaInferiorDerechaY + a);
+        pincel.setColor(colorFranjaDinamica);
+        pincel.setStrokeWidth(0.01f*largo);
+        canvas.drawArc(rect, 150, angulo_rotacion_medida - 240, false, pincel);
+
+
+        //Dibujar las unidades
+        pincel.setStyle(Paint.Style.FILL);
+        pincel.setColor(colorLineas);
+        pincel.setTextSize(0.08f * largo);
+        float anchoCadenaUnidades = pincel.measureText(unidades);
+        canvas.drawText(unidades, -0.5f * anchoCadenaUnidades,- 0.15f * largo, pincel);
+        //aqui termina dibujo de las unidades
+
+        //aqui despliegue de la medida
+        pincel.setTextSize(0.1f * largo);
+        float anchoCadenaNumero = pincel.measureText("" + medida);
+        pincel.setColor(colorNumerosDesplieggue);
+        canvas.drawText("" + medida, -0.5f * anchoCadenaNumero, 0.2f * largo, pincel);
+
+        //marcar empresa
+        String empresa = "IoT.PhysicsSensor";
+        pincel.setTextSize(0.05f * largo);
+        float anchoCadenaNombreEmpresa = pincel.measureText(empresa);
+        canvas.drawText(empresa, -0.5f * anchoCadenaNombreEmpresa, 0.35f * largo, pincel);
+
+
+
+        //se restaura el canvas al estado incial
+        //el que se garbó al principio de este método
+        canvas.restore();
+
+        //para efectos de animación
+        invalidate();
+
+    }//fin onDraw
+
+
 }
Index: ../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/Graficador.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaseptimaapp.utilidades;public class Graficador {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/Graficador.java b/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/Graficador.java
--- a/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/Graficador.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/Graficador.java	(date 1678770919212)
@@ -1,2 +1,125 @@
-package com.curso_simulaciones.mivigesimaseptimaapp.utilidades;public class Graficador {
+package com.curso_simulaciones.mivigesimaseptimaapp.utilidades;
+
+import android.content.Context;
+import android.view.View;
+
+import com.github.mikephil.charting.charts.LineChart;
+import com.github.mikephil.charting.components.YAxis;
+import com.github.mikephil.charting.data.LineData;
+import com.github.mikephil.charting.data.LineDataSet;
+
+import java.util.ArrayList;
+
+public class Graficador extends LineChart {
+
+
+    private LineDataSet lineDataSet;
+    private String tituloEjeY="";
+    private int colorLinea;
+    private float grosorLinea=1f;
+    private int colorValores;
+    private int colorMarcadores;
+
+
+
+    public Graficador(Context context) {
+
+        super(context);
+
+        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB) {
+            this.setLayerType(View.LAYER_TYPE_SOFTWARE, null);
+
+        }
+
+
+    }
+
+
+    public void setDatos(ArrayList datos) {
+
+        LineDataSet lineDataSet = new LineDataSet(datos, tituloEjeY);
+        lineDataSet.setLineWidth(grosorLinea);
+        lineDataSet.setColor(colorLinea);
+        lineDataSet.setValueTextColor(colorValores);
+        lineDataSet.setCircleColor(colorMarcadores);
+        LineData lineData = new LineData(lineDataSet);
+        this.setData(lineData);
+
+        /*
+         Esta instrucción es de la librería y es necesaria para
+         que el eje se vaya desplazando a medida que entran datos
+         */
+
+        this.moveViewTo(lineData.getEntryCount() - 7, 50f, YAxis.AxisDependency.LEFT);
+
+
+    }
+
+
+    /*
+     Modifica el grosr del trazo de la gráfica
+     */
+    public void setGrosorLinea(float grosorLinea){
+
+        this.grosorLinea=grosorLinea;
+    }
+
+    public void setColorLinea(int colorLinea){
+
+        this.colorLinea=colorLinea;
+
+    }
+
+
+    public  void setColorFondo(int colorFondo){
+
+        this.setBackgroundColor(colorFondo);
+
+    }
+
+
+    public void setColorTextoEjes(int colorTextoEjes){
+
+        //texto eje y izquierda
+        this.getAxisLeft().setTextColor(colorTextoEjes);
+        //texto eje y derecha
+        this.getAxisRight().setTextColor(colorTextoEjes);
+        //texto eje x
+        this.getXAxis().setTextColor(colorTextoEjes);
+        //texto título eje y
+        this.getLegend().setTextColor(colorTextoEjes);
+        //texto título eje x
+        this.getDescription().setTextColor(colorTextoEjes);
+
+    }
+
+    public void setColorValores(int colorValores){
+
+        this.colorValores=colorValores;
+
+
+    }
+
+
+    public void setTituloEjeX(String tituloEjeX){
+
+
+        this.getDescription().setText(tituloEjeX);
+
+    }
+
+
+    public void setTituloEjeY(String tituloEjeY){
+
+        this.tituloEjeY=tituloEjeY;
+
+    }
+
+
+    public void setColorMarcadores(int colorMarcadores){
+
+        this.colorMarcadores=colorMarcadores;
+    }
+
+
 }
Index: ../../modulo_10/MiVigesimaCuartaApp/.idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"GRADLE\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_10/MiVigesimaCuartaApp/.idea/gradle.xml b/../../modulo_10/MiVigesimaCuartaApp/.idea/gradle.xml
--- a/../../modulo_10/MiVigesimaCuartaApp/.idea/gradle.xml	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_10/MiVigesimaCuartaApp/.idea/gradle.xml	(date 1678848158285)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
Index: ../../modulo_9/MiVigesimaSegundaApp/.idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"GRADLE\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_9/MiVigesimaSegundaApp/.idea/gradle.xml b/../../modulo_9/MiVigesimaSegundaApp/.idea/gradle.xml
--- a/../../modulo_9/MiVigesimaSegundaApp/.idea/gradle.xml	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_9/MiVigesimaSegundaApp/.idea/gradle.xml	(date 1679107979005)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
Index: ../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/Luxometro.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaseptimaapp.utilidades;public class Luxometro {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/Luxometro.java b/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/Luxometro.java
--- a/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/Luxometro.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/Luxometro.java	(date 1678770879145)
@@ -1,2 +1,111 @@
-package com.curso_simulaciones.mivigesimaseptimaapp.utilidades;public class Luxometro {
+package com.curso_simulaciones.mivigesimaseptimaapp.utilidades;
+
+import android.content.Context;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+
+import com.curso_simulaciones.mivigesimaseptimaapp.datos.AlmacenDatosRAM;
+
+public class Luxometro extends GaugeSimple implements SensorEventListener {
+
+    private SensorManager sensorManager;
+
+    public Luxometro(Context context){
+        super(context);
+
+        captarSensor(context);
+
+
+    }
+
+
+    private void captarSensor(Context context) {
+
+        //captamos el servicio del sensor
+        sensorManager = (SensorManager) context.getSystemService(Context.SENSOR_SERVICE);
+        sensorManager.registerListener(this, sensorManager.getDefaultSensor(Sensor.TYPE_LIGHT), SensorManager.SENSOR_DELAY_FASTEST);
+
+    }
+
+    //se activa sólo cuando hay cambios
+    public void onSensorChanged(SensorEvent event) {
+
+        float medida = event.values[SensorManager.DATA_X];
+        //para reportar con un decimal
+        medida = (float)Math.floor(medida*100)/100f;
+        this.setMedida(medida);
+        cambiarEscala(medida);
+        //almacenar dato actual
+        AlmacenDatosRAM.datoActual=medida;
+
+    }
+
+    @Override
+    public void onAccuracyChanged(Sensor sensor, int accuracy) {
+
+    }
+
+
+    private void cambiarEscala(float medida){
+
+        float maximo=100f;
+        float minimo=0f;
+
+        if(medida>0 && ((medida < 100)^(medida==100f ))){
+
+            maximo=100f;
+            minimo=0f;
+
+        }
+
+        if(medida>100 && ((medida < 200)^(medida==200f ))){
+
+            maximo=200f;
+            minimo=100f;
+
+        }
+
+        if(medida>200 && ((medida < 500)^(medida==500f ))){
+
+            maximo=500f;
+            minimo=200f;
+
+        }
+
+        if(medida>500 && ((medida < 1000)^(medida==1000f ))){
+
+            maximo=1000f;
+            minimo=500f;
+
+        }
+
+
+        if(medida>1000 && ((medida < 5000)^(medida==5000f ))){
+
+            maximo=5000f;
+            minimo=1000f;
+
+        }
+
+        if(medida>5000 && ((medida < 10000)^(medida==10000f ))){
+
+            maximo=10000f;
+            minimo=5000f;
+
+        }
+
+        if(medida>10000 && ((medida < 50000)^(medida==50000f ))){
+
+            maximo=50000f;
+            minimo=10000f;
+
+        }
+
+
+        this.setRango(minimo,maximo);
+
+    }
+
 }
Index: ../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/datos/AlmacenDatosRAM.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaterceraapp.datos;public class AlmacenDatosRAM {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/datos/AlmacenDatosRAM.java b/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/datos/AlmacenDatosRAM.java
--- a/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/datos/AlmacenDatosRAM.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/datos/AlmacenDatosRAM.java	(date 1678765455084)
@@ -1,2 +1,45 @@
-package com.curso_simulaciones.mivigesimaterceraapp.datos;public class AlmacenDatosRAM {
+package com.curso_simulaciones.mivigesimaterceraapp.datos;
+
+public class AlmacenDatosRAM {
+
+
+    public static float ancho_pantalla, alto_pantalla;
+    public static int tamanoLetraResolucionIncluida;
+
+    //masas en kg
+    public static float  m1,m2;
+
+    //radio de las poleas en pixeles
+    public static float radio;
+
+    public static float tiempo;
+
+    //aceleraciones de m1 y m2  en m/s2
+    public static float a1,a2;
+
+    //tensión en la cuerda en N;
+    public static float F=0;
+
+    /*
+     desplazamiento angular (radianes)
+     de rotación de las poleas
+     */
+    public static float teta_1, teta_2;
+
+
+    //origen
+    public static float origenY_en_pixeles;
+    public static float origenY_en_metros;
+
+    //posiciones
+    public static float x1_en_pixeles,x2_en_pixeles,y1_en_pixeles,y2_en_pixeles;
+    public static float yi1_en_metros, yi2_en_metros, y1_en_metros, y2_en_metros;
+
+    //posiciónes en Y iniciales
+    public static float yi1_en_pixeles, yi2_en_pixeles;
+
+
+    public static float desplazamiento_m1_en_metros, desplazamiento_m2_en_metros;
+    public static float desplazamiento_m1_en_pixeles, desplazamiento_m2_en_pixeles;
 }
+
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>pluginManagement {\r\n    repositories {\r\n        google()\r\n        mavenCentral()\r\n        gradlePluginPortal()\r\n    }\r\n}\r\ndependencyResolutionManagement {\r\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\r\n    repositories {\r\n        google()\r\n        mavenCentral()\r\n    }\r\n}\r\nrootProject.name = \"MiVigesimaOctavaApp\"\r\ninclude ':app'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/settings.gradle b/settings.gradle
--- a/settings.gradle	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/settings.gradle	(date 1678772954795)
@@ -10,6 +10,7 @@
     repositories {
         google()
         mavenCentral()
+        maven { url 'https://jitpack.io' }
     }
 }
 rootProject.name = "MiVigesimaOctavaApp"
Index: ../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/controlador/HiloAnimacion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimacuartaapp.controlador;public class HiloAnimacion {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/controlador/HiloAnimacion.java b/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/controlador/HiloAnimacion.java
--- a/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/controlador/HiloAnimacion.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/controlador/HiloAnimacion.java	(date 1678767774540)
@@ -1,2 +1,61 @@
-package com.curso_simulaciones.mivigesimacuartaapp.controlador;public class HiloAnimacion {
+package com.curso_simulaciones.mivigesimacuartaapp.controlador;
+
+import com.curso_simulaciones.mivigesimacuartaapp.modelo.ModeloFisico;
+
+public class HiloAnimacion extends Thread {
+
+
+    public boolean pausa = true;
+    private boolean corriendo;
+    private long periodo_muestreo = 50;
+    public float tiempo = 0;
+
+    private ModeloFisico modelo = new ModeloFisico();
+
+    private ActividadControladora actividad;
+
+
+    public HiloAnimacion(ActividadControladora actividad) {
+
+        this.actividad =actividad;
+
+    }
+
+
+
+    @Override
+    public void run() {
+        corriendo = true;
+        while (corriendo) {
+
+            try {
+                Thread.sleep(periodo_muestreo);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+
+            if(pausa==false) {
+                tiempo = tiempo + 0.05f;
+                setCalculos(tiempo);
+                actualizarFisica();
+            }
+
+        }
+
+
+    }
+
+    private void setCalculos(float tiempo){
+
+        modelo.setEstadoSistema(tiempo);
+
+    }
+
+
+    private void actualizarFisica(){
+
+        actividad.cambiarEstadosEscenaPizarra();
+
+    }
+
 }
Index: ../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/controlador/HiloAnimacion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaterceraapp.controlador;public class HiloAnimacion {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/controlador/HiloAnimacion.java b/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/controlador/HiloAnimacion.java
--- a/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/controlador/HiloAnimacion.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/controlador/HiloAnimacion.java	(date 1678766122156)
@@ -1,2 +1,84 @@
-package com.curso_simulaciones.mivigesimaterceraapp.controlador;public class HiloAnimacion {
+package com.curso_simulaciones.mivigesimaterceraapp.controlador;
+
+import com.curso_simulaciones.mivigesimaterceraapp.datos.AlmacenDatosRAM;
+import com.curso_simulaciones.mivigesimaterceraapp.modelo.ModeloFisico;
+import com.curso_simulaciones.mivigesimaterceraapp.vista.CR;
+
+public class HiloAnimacion extends Thread {
+
+
+    public boolean pausa =true;
+    private boolean corriendo;
+    private long periodo_muestreo = 100;
+    public float tiempo = 0;
+
+    private ModeloFisico modelo = new ModeloFisico();
+
+    private ActividadControladora actividad;
+
+
+    public HiloAnimacion(ActividadControladora actividad) {
+
+        this.actividad =actividad;
+
+    }
+
+
+
+
+    @Override
+    public void run() {
+        corriendo = true;
+        while (corriendo) {
+
+
+            try {
+                Thread.sleep(periodo_muestreo);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+
+
+            if(pausa==false) {
+                tiempo = tiempo + 0.01f;
+                setCalculos(tiempo);
+
+                actualizarFisica();
+
+            }
+
+
+        }
+
+
+    }
+
+    private void setCalculos(float tiempo){
+        float m1 = AlmacenDatosRAM.m1;
+        float m2 = AlmacenDatosRAM.m2;
+        modelo.setCalculos(tiempo, m1,m2 );
+
+    }
+
+
+    private void actualizarFisica(){
+
+        actividad.cambiarEstadosEscenaPizarra();
+
+        //en caso de que se termine el recorrido de alguna de las masas
+        //en la regla se repetirá la animación
+        boolean a = AlmacenDatosRAM.y1_en_pixeles> CR.pcApxY(80.0f);
+        boolean b = AlmacenDatosRAM.y1_en_pixeles < CR.pcApxY(10f);
+        boolean c = AlmacenDatosRAM.y2_en_pixeles < CR.pcApxY(10f);
+        boolean d = AlmacenDatosRAM.y2_en_pixeles > CR.pcApxY(80.0f);
+
+        if (a || b || c || d) {
+
+            tiempo = 0.0f;
+
+        }
+
+    }
+
+
 }
Index: ../../modulo_8/MiDecimaNovenaApp/.idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"GRADLE\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_8/MiDecimaNovenaApp/.idea/gradle.xml b/../../modulo_8/MiDecimaNovenaApp/.idea/gradle.xml
--- a/../../modulo_8/MiDecimaNovenaApp/.idea/gradle.xml	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_8/MiDecimaNovenaApp/.idea/gradle.xml	(date 1678667915971)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
Index: ../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/Boton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaseptimaapp.utilidades;public class Boton {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/Boton.java b/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/Boton.java
--- a/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/Boton.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/utilidades/Boton.java	(date 1678770756288)
@@ -1,2 +1,125 @@
-package com.curso_simulaciones.mivigesimaseptimaapp.utilidades;public class Boton {
+package com.curso_simulaciones.mivigesimaseptimaapp.utilidades;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Matrix;
+import android.graphics.Paint;
+import android.widget.ImageView;
+
+public class Boton extends ImageView {
+
+    private Bitmap imagen;
+    Bitmap imagen_escalada = null;
+    private float tamamano_letra;
+    private String cadena = "";
+
+
+    public Boton(Context context) {
+
+        super(context);
+
+
+    }
+
+
+    public void setText(String cadena) {
+
+        this.cadena = cadena;
+
+
+    }
+
+
+    public String getText() {
+
+        this.cadena = cadena;
+
+        return cadena;
+
+
+    }
+
+
+    public void setImagen(int imagen_importada) {
+
+
+        imagen = BitmapFactory.decodeResource(getResources(), imagen_importada);
+
+
+    }
+
+
+    protected void onDraw(Canvas canvas) {
+
+
+        Paint pincel = new Paint();
+        pincel.setAntiAlias(true);
+        pincel.setLinearText(true);
+
+        float ancho=getWidth();
+        float alto=getHeight();
+        float escala=1;
+        if(ancho>alto){
+            escala=alto;
+        } else {escala=ancho;}
+
+        if (imagen != null) {
+
+            imagen_escalada = escalarImagen(imagen, (int) (0.9f * escala), (int) (0.9f * escala));
+
+        }
+
+        int ex = (getWidth() - imagen_escalada.getWidth()) / 2;
+        int ey = (getHeight() - imagen_escalada.getHeight()) / 2;
+
+        tamamano_letra = 0.08f * getWidth();
+
+        if (imagen != null) {
+            canvas.drawBitmap(imagen_escalada, ex, ey, null);//dimension,dimension, null);
+        }
+
+
+        pincel.setTextSize(tamamano_letra);
+        float anchoCadenaUnidades = pincel.measureText(cadena);
+        float posicion_x_letra = (getWidth() - anchoCadenaUnidades) / 2;
+        float posicion_y_letra = ey + imagen_escalada.getHeight() + tamamano_letra;
+
+        pincel.setColor(Color.BLACK);
+        canvas.drawText(cadena, posicion_x_letra, posicion_y_letra, pincel);
+
+
+        invalidate();
+
+    }
+
+    /*
+       Se escala con Matrix para no dañar la resolución
+     */
+
+
+    public Bitmap escalarImagen(Bitmap bitmap, int newWidth, int newHeight) {
+        Bitmap scaledBitmap = Bitmap.createBitmap(newWidth, newHeight, bitmap.getConfig());
+
+        float scaleX = newWidth / (float) bitmap.getWidth();
+        float scaleY = newHeight / (float) bitmap.getHeight();
+
+        Matrix scaleMatrix = new Matrix();
+        scaleMatrix.setScale(scaleX, scaleY, 0, 0);
+
+        Canvas canvas = new Canvas(scaledBitmap);
+        canvas.setMatrix(scaleMatrix);
+        Paint paint = new Paint(Paint.FILTER_BITMAP_FLAG);
+        paint.setAntiAlias(true);
+        paint.setDither(true);
+        paint.setFilterBitmap(true);
+        canvas.drawBitmap(bitmap, 0, 0, paint);
+
+        return scaledBitmap;
+
+    }
+
+
 }
Index: app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/ActividadPrincipalMiVigesimaOctavaApp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaoctavaapp;public class ActividadPrincipalMiVigesimaOctavaApp {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/ActividadPrincipalMiVigesimaOctavaApp.java b/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/ActividadPrincipalMiVigesimaOctavaApp.java
--- a/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/ActividadPrincipalMiVigesimaOctavaApp.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/ActividadPrincipalMiVigesimaOctavaApp.java	(date 1678773203607)
@@ -1,2 +1,182 @@
-package com.curso_simulaciones.mivigesimaoctavaapp;public class ActividadPrincipalMiVigesimaOctavaApp {
+package com.curso_simulaciones.mivigesimaoctavaapp;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.graphics.Color;
+import android.graphics.drawable.Drawable;
+import android.hardware.Sensor;
+import android.hardware.SensorManager;
+import android.os.Bundle;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+import android.widget.Toast;
+
+import com.curso_simulaciones.mivigesimaoctavaapp.actividades_secundarias.ActividadDesplegadoraDatos;
+import com.curso_simulaciones.mivigesimaoctavaapp.utilidades.Boton;
+
+public class ActividadPrincipalMiVigesimaOctavaApp extends Activity {
+
+
+    private Boton consultar, salir;
+
+
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        //para crear elementos de la GUI
+        crearElementosGUI();
+
+        /*
+        Para informar cómo se debe pegar el administrador de
+        diseño LinearLayout obtenido con el método crearGui()
+        */
+        ViewGroup.LayoutParams parametro_layout_principal = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+
+
+        //pegar el contenedor con la GUI
+        this.setContentView(crearGUI(), parametro_layout_principal);
+
+        existenciaSensor();
+
+        eventos();
+
+
+    }//fin del método onCreate
+
+
+    private void crearElementosGUI() {
+
+        consultar = new Boton(this);
+        consultar.setImagen(R.drawable.consultar);
+
+        salir = new Boton(this);
+        salir.setImagen(R.drawable.salir);
+
+    }
+
+
+    /*método responsable de administrar el diseño de la GUI*/
+    private LinearLayout crearGUI() {
+
+
+        LinearLayout linear_layout_principal = new LinearLayout(this);
+        linear_layout_principal.setOrientation(LinearLayout.VERTICAL);
+        linear_layout_principal.setGravity(Gravity.CENTER_HORIZONTAL);
+        linear_layout_principal.setGravity(Gravity.FILL);
+        linear_layout_principal.setBackgroundColor(Color.WHITE);
+        linear_layout_principal.setWeightSum(10);
+
+
+        //LinearLayout primera fila
+        LinearLayout linear_layout_primera_fila = new LinearLayout(this);
+        linear_layout_primera_fila.setOrientation(LinearLayout.HORIZONTAL);
+        linear_layout_primera_fila.setGravity(Gravity.FILL);
+        linear_layout_primera_fila.setBackgroundColor(Color.WHITE);
+        LinearLayout.LayoutParams parametros_primera_fila = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0);//ViewGroup.LayoutParams.WRAP_CONTENT);
+        parametros_primera_fila.weight = 8.0f;
+        linear_layout_primera_fila.setLayoutParams(parametros_primera_fila);
+
+
+        //fondo primera fila
+        Drawable fondo = getResources().getDrawable(R.drawable.imagen_entrada_app_28);
+        linear_layout_primera_fila.setBackgroundDrawable(fondo);
+
+        //LinearLayout segunda fila
+        LinearLayout linear_layout_segunda_fila = new LinearLayout(this);
+        linear_layout_segunda_fila.setOrientation(LinearLayout.HORIZONTAL);
+        linear_layout_segunda_fila.setGravity(Gravity.FILL);
+        LinearLayout.LayoutParams parametros_segunda_fila = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0);
+        parametros_segunda_fila.weight = 2.0f;
+        linear_layout_segunda_fila.setWeightSum(2.0f);
+        linear_layout_segunda_fila.setLayoutParams(parametros_segunda_fila);
+
+
+        LinearLayout.LayoutParams parametros_pegado_boton = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.MATCH_PARENT);
+        parametros_pegado_boton.weight = 1.0f;
+        consultar.setLayoutParams(parametros_pegado_boton);
+        salir.setLayoutParams(parametros_pegado_boton);
+        linear_layout_segunda_fila.addView(consultar);
+        linear_layout_segunda_fila.addView(salir);
+
+
+        linear_layout_principal.addView(linear_layout_primera_fila);
+        linear_layout_principal.addView(linear_layout_segunda_fila);
+
+
+        return linear_layout_principal;
+
+
+    }
+
+
+    private void eventos() {
+
+        consultar.setOnClickListener(new View.OnClickListener() {
+
+            public void onClick(View v) {
+
+
+                lanzarDatos();
+
+
+            }
+        });
+
+        salir.setOnClickListener(new View.OnClickListener() {
+
+            public void onClick(View v) {
+
+                finish();
+            }
+        });
+
+
+    }
+
+
+    private void lanzarDatos() {
+
+        Intent intent = new Intent(this, ActividadDesplegadoraDatos.class);
+        startActivity(intent);
+
+    }
+
+
+
+    //preguntar si el sensor existe
+    private boolean existenciaSensor(){
+
+        boolean existe=false;
+        SensorManager sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
+
+        if (sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER)!=null){
+
+            existe =true;
+
+
+        } else {
+
+            desplegarAviso();
+
+        }
+
+        return existe;
+    }
+
+
+    private void desplegarAviso() {
+
+        Toast toast = Toast.makeText(getApplicationContext(), "SU DISPOSITIVO NO POSEE ACELEROMETRO", Toast.LENGTH_SHORT);
+        toast.show();
+
+    }
+
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        finish();
+    }
 }
Index: ../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/modelo/ModeloFisico.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaterceraapp.modelo;public class ModeloFisico {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/modelo/ModeloFisico.java b/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/modelo/ModeloFisico.java
--- a/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/modelo/ModeloFisico.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/modelo/ModeloFisico.java	(date 1678765744009)
@@ -1,2 +1,119 @@
-package com.curso_simulaciones.mivigesimaterceraapp.modelo;public class ModeloFisico {
+package com.curso_simulaciones.mivigesimaterceraapp.modelo;
+
+import com.curso_simulaciones.mivigesimaterceraapp.datos.AlmacenDatosRAM;
+import com.curso_simulaciones.mivigesimaterceraapp.vista.CR;
+
+public class ModeloFisico {
+
+    //gravedad
+    private float g = 9.8f;//en m/s2
+
+
+    private float desplazamiento_m1_en_pixeles, desplazamiento_m2_en_pixeles;
+    private float factorConversion_metroApixel, factorConversion_pixelAmetro;
+    private float y1_en_pixeles, y2_en_pixeles;
+
+
+    public ModeloFisico() {
+
+
+    }
+
+
+    /*
+      Dados los valores de las masas calcula posiciones,
+      aceleraciones, tensión, desplazamiento
+      angular de las poleas
+
+     */
+    public void setCalculos(float tiempo, float m1, float m2 ) {
+
+        factorConversion();
+
+
+        float a = ((4 * m1 - 2 * m2) / (4 * m1 + m2)) * g;
+
+        //cálculo de la tensión en la cuerda
+        float F = ((3 * m1 * m2) / (4 * m1 + m2)) * g;
+
+        //aceleraciones de m1 y m2 en m/s^^2
+        float a1 = a;
+        float a2 = -0.5f * a;
+
+        //desplazamiento de las masas en metros
+        float desplazamiento_m1_en_metros = 0.5f * a1 * tiempo * tiempo;
+        float desplazamiento_m2_en_metros = 0.5f * a2 * tiempo * tiempo;
+
+        //almacenar valores para que pizarra los reporte
+        AlmacenDatosRAM.desplazamiento_m1_en_metros = desplazamiento_m1_en_metros;
+        AlmacenDatosRAM.desplazamiento_m2_en_metros = desplazamiento_m2_en_metros;
+
+        /*
+         Convertir m a pixeles
+        */
+        //desplazamientos de las masas en pixeles
+        desplazamiento_m1_en_pixeles = factorConversion_metroApixel * desplazamiento_m1_en_metros;
+        desplazamiento_m2_en_pixeles = factorConversion_metroApixel * desplazamiento_m2_en_metros;
+
+        AlmacenDatosRAM.desplazamiento_m1_en_pixeles = desplazamiento_m1_en_pixeles;
+        AlmacenDatosRAM.desplazamiento_m2_en_pixeles = desplazamiento_m2_en_pixeles;
+
+
+        //posición inciales en pixeles
+        float yi1_en_pixeles = AlmacenDatosRAM.yi1_en_pixeles;
+        float yi2_en_pixeles = AlmacenDatosRAM.yi2_en_pixeles;
+
+        //posiciones de las masas en pixeles
+        y1_en_pixeles = yi1_en_pixeles + desplazamiento_m1_en_pixeles;
+        y2_en_pixeles = yi2_en_pixeles + desplazamiento_m2_en_pixeles;
+        AlmacenDatosRAM.y1_en_pixeles = y1_en_pixeles;
+        AlmacenDatosRAM.y2_en_pixeles = y2_en_pixeles;
+
+
+
+        float teta_1 = (float) (Math.toDegrees(desplazamiento_m1_en_pixeles / AlmacenDatosRAM.radio));
+        float teta_2 = -0.5f * teta_1;
+
+
+
+        AlmacenDatosRAM.y1_en_metros = factorConversion_pixelAmetro * y1_en_pixeles;
+        AlmacenDatosRAM.y2_en_metros = factorConversion_pixelAmetro * y2_en_pixeles;
+
+        //enviar resultados a AlmacenDatosRAM
+        AlmacenDatosRAM.a1 = a1;
+        AlmacenDatosRAM.a2 = a2;
+
+        AlmacenDatosRAM.teta_1 = teta_1;
+        AlmacenDatosRAM.teta_2 = teta_2;
+        AlmacenDatosRAM.F = F;
+
+        AlmacenDatosRAM.tiempo = tiempo;
+
+
+    }
+
+
+    private void factorConversion() {
+
+         /*
+        Para dar una equivalencia de pixeles
+        en metros se asumirá que 1 m equivale
+        al ALTO de la pantalla (en posición
+        LANSCAPE) en pixeles. Con base en esto
+        el factor de conversion de metros a pixeles
+        es:
+
+        factorConversion_metroApixel= (ALTO en pixeles/ 1 metro)
+        factorConversion_pixelAmetro= (1 metro / ALTO en pixeles)
+
+        */
+
+        factorConversion_metroApixel = CR.pcApxY(100f) / 1;
+
+        factorConversion_pixelAmetro = 1 / CR.pcApxY(100f);
+
+    }
+
+
+
 }
Index: ../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/datos/AlmacenDatosRAM.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimacuartaapp.datos;public class AlmacenDatosRAM {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/datos/AlmacenDatosRAM.java b/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/datos/AlmacenDatosRAM.java
--- a/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/datos/AlmacenDatosRAM.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/datos/AlmacenDatosRAM.java	(date 1678767502809)
@@ -1,2 +1,27 @@
-package com.curso_simulaciones.mivigesimacuartaapp.datos;public class AlmacenDatosRAM {
+package com.curso_simulaciones.mivigesimacuartaapp.datos;
+
+public class AlmacenDatosRAM {
+    public static float ancho_pantalla, alto_pantalla;
+    public static int tamanoLetraResolucionIncluida;
+
+    public static float vInicial =20;//en m/s
+    public static float velocidad, velocidadX,velocidadY;//en m/s
+    public static float angulo=45;//en grados
+    public static float anguloVelocidad;//en radianes
+    public static float aceleracion=10;//en m/s^2
+    public static float tiempo;//en s
+
+    public static boolean NUEVO=false;
+
+
+    public static float origenX_en_pixeles,origenY_en_pixeles;
+
+    public static float origenX_en_metros, origenY_en_metros;
+
+    public static float xi_en_pixeles, yi_en_pixeles,x_en_pixeles,y_en_pixeles;
+    public static float xi_en_metros, yi_en_metros, x_en_metros, y_en_metros;
+
+    public static float desplazamiento_en_metros_X, desplazamiento_en_metros_Y;
+
 }
+
Index: ../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/utilidades/Boton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaterceraapp.utilidades;public class Boton {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/utilidades/Boton.java b/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/utilidades/Boton.java
--- a/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/utilidades/Boton.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/utilidades/Boton.java	(date 1678765881527)
@@ -1,2 +1,112 @@
-package com.curso_simulaciones.mivigesimaterceraapp.utilidades;public class Boton {
+package com.curso_simulaciones.mivigesimaterceraapp.utilidades;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Matrix;
+import android.graphics.Paint;
+import android.widget.ImageView;
+
+public class Boton extends ImageView {
+
+    private Bitmap imagen;
+    private int dimension;
+    private float tamamano_letra;
+    private String cadena="";
+
+
+
+    public Boton(Context context) {
+
+        super(context);
+
+
+    }
+
+
+
+    public void setText(String cadena){
+
+        this.cadena=cadena;
+
+
+    }
+
+
+    public String getText(){
+
+        this.cadena=cadena;
+
+        return cadena;
+
+
+    }
+
+
+
+    public void setImagen(int imagen_importada){
+
+        imagen = BitmapFactory.decodeResource(getResources(),imagen_importada);
+
+    }
+
+
+
+    protected void onDraw(Canvas canvas) {
+
+        Paint pincel = new Paint();
+        pincel.setAntiAlias(true);
+        pincel.setLinearText(true);
+
+        dimension=getWidth();
+
+        Bitmap imagen_escalada=null;
+        if(imagen!=null)
+            imagen_escalada =escalarImagen(imagen,(int)(0.8f*getHeight()), (int)(0.8f*getHeight()));
+
+        int ex= (getWidth()-imagen_escalada.getWidth())/2;
+        int ey= (getHeight()-imagen_escalada.getHeight())/2;
+
+        tamamano_letra=0.1f*getWidth();
+
+        if(imagen!=null)
+            canvas.drawBitmap(imagen_escalada, ex, ey, null);
+
+        pincel.setTextSize(tamamano_letra);
+        float anchoCadenaUnidades = pincel.measureText(cadena);
+        float posicion_x_letra= (getWidth()-anchoCadenaUnidades)/2;
+        float posicion_y_letra= ey+ imagen_escalada.getHeight()+ tamamano_letra;
+
+        pincel.setColor(Color.BLACK);
+        canvas.drawText(cadena,posicion_x_letra,posicion_y_letra,pincel);
+
+
+        invalidate();
+
+    }
+
+
+    public Bitmap escalarImagen(Bitmap bitmap,int newWidth,int newHeight) {
+        Bitmap scaledBitmap = Bitmap.createBitmap(newWidth, newHeight, bitmap.getConfig());
+
+        float scaleX = newWidth/(float) bitmap.getWidth();
+        float scaleY = newHeight/(float) bitmap.getHeight();
+
+        Matrix scaleMatrix = new Matrix();
+        scaleMatrix.setScale(scaleX, scaleY, 0, 0);
+
+        Canvas canvas = new Canvas(scaledBitmap);
+        canvas.setMatrix(scaleMatrix);
+        Paint paint = new Paint(Paint.FILTER_BITMAP_FLAG);
+        paint.setAntiAlias(true);
+        paint.setDither(true);
+        paint.setFilterBitmap(true);
+        canvas.drawBitmap(bitmap, 0, 0, paint);
+
+        return scaledBitmap;
+
+    }
+
 }
Index: ../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/modelo/ModeloFisico.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimacuartaapp.modelo;public class ModeloFisico {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/modelo/ModeloFisico.java b/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/modelo/ModeloFisico.java
--- a/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/modelo/ModeloFisico.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/modelo/ModeloFisico.java	(date 1678767923243)
@@ -1,2 +1,102 @@
-package com.curso_simulaciones.mivigesimacuartaapp.modelo;public class ModeloFisico {
+package com.curso_simulaciones.mivigesimacuartaapp.modelo;
+
+import com.curso_simulaciones.mivigesimacuartaapp.datos.AlmacenDatosRAM;
+import com.curso_simulaciones.mivigesimacuartaapp.vista.CR;
+
+public class ModeloFisico {
+
+    private float factorConversion_metroApixel, factorConversion_pixelAmetro;
+
+    private float x_en_pixeles, y_en_pixeles;
+
+    private float desplazamiento_en_metros_X, desplazamiento_en_metros_Y;
+
+    private float desplazamiento_en_pixeles_X, desplazamiento_en_pixeles_Y;
+
+
+    public ModeloFisico() {
+
+
+    }
+
+
+    /*
+      Calcula y lleva los datos de elongación y tiempo
+      a la clase AlmaceDatosRAM
+   */
+    public void setEstadoSistema(float tiempo) {
+
+        factorConversion();
+
+        float angulo = AlmacenDatosRAM.angulo;
+
+        //velocidades iniciales en m/s y aceleración en m/s^2
+        float vXInicial = (float) (AlmacenDatosRAM.vInicial * Math.cos(Math.toRadians(angulo)));
+        float vYInicial = (float) (AlmacenDatosRAM.vInicial * Math.sin(Math.toRadians(angulo)));
+        float aceleracion = AlmacenDatosRAM.aceleracion;
+
+        //desplazamientos en metros
+        desplazamiento_en_metros_X = vXInicial * tiempo;
+        desplazamiento_en_metros_Y = vYInicial * tiempo + 0.5f * aceleracion * tiempo * tiempo;
+
+        //almacenar valor para que pizarra lo reporte
+        AlmacenDatosRAM.desplazamiento_en_metros_X = desplazamiento_en_metros_X;
+        AlmacenDatosRAM.desplazamiento_en_metros_Y = desplazamiento_en_metros_Y;
+
+
+        /*
+         Convertir m a pixeles
+        */
+        //desplazamientos en pixeles
+        desplazamiento_en_pixeles_X = factorConversion_metroApixel * desplazamiento_en_metros_X;
+        desplazamiento_en_pixeles_Y = factorConversion_metroApixel * desplazamiento_en_metros_Y;
+
+        //posición incial en pixeles
+        float xi_en_pixeles = AlmacenDatosRAM.xi_en_pixeles;
+        float yi_en_pixeles = AlmacenDatosRAM.yi_en_pixeles;
+
+        //posición en pixeles (con esto se grafica en pantalla)
+        x_en_pixeles = xi_en_pixeles + desplazamiento_en_pixeles_X;
+        y_en_pixeles = yi_en_pixeles + desplazamiento_en_pixeles_Y;
+
+        //velocidades en m/s
+        float velocidadX = vXInicial;
+        float velocidadY = vYInicial + aceleracion * tiempo;
+
+        AlmacenDatosRAM.x_en_metros = factorConversion_pixelAmetro * x_en_pixeles;
+        AlmacenDatosRAM.y_en_metros = factorConversion_pixelAmetro * y_en_pixeles;
+        AlmacenDatosRAM.velocidadX = velocidadX;//en m/s
+        AlmacenDatosRAM.velocidadY = velocidadY;//en m/s
+        AlmacenDatosRAM.velocidad = (float) (Math.sqrt(velocidadX * velocidadX + velocidadY * velocidadY));
+        //Devuelve el ángulo (ccordenadas polares) en radianes y
+        AlmacenDatosRAM.anguloVelocidad = (float) (Math.atan2(velocidadY, velocidadX));//radianes
+        AlmacenDatosRAM.tiempo = tiempo;
+
+        AlmacenDatosRAM.x_en_pixeles = x_en_pixeles;
+        AlmacenDatosRAM.y_en_pixeles = y_en_pixeles;
+
+    }
+
+
+    private void factorConversion() {
+
+       /*
+        Para dar una equivalencia de pixeles
+        en metros se aumirá que 50 m equivale
+        al ALTO de la pantalla (en posición
+        LANSCAPE) en pixeles. Con base en esto
+        el factor de conversion de metos  apixeles
+        es:
+
+        factorConversion_metroApixel= (ALTO en pixeles/ 50 metros)
+        factorConversion_pixelAmetro= (ALTO metros / ALTO en pixeles)
+
+        */
+
+        factorConversion_metroApixel = CR.pcApxY(100f) / 50f;
+
+        factorConversion_pixelAmetro = 50f / CR.pcApxY(100f);
+
+    }
+
 }
Index: app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/actividades_secundarias/ActividadDesplegadoraDatos.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaoctavaapp.actividades_secundarias;public class ActividadDesplegadoraDatos {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/actividades_secundarias/ActividadDesplegadoraDatos.java b/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/actividades_secundarias/ActividadDesplegadoraDatos.java
--- a/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/actividades_secundarias/ActividadDesplegadoraDatos.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/actividades_secundarias/ActividadDesplegadoraDatos.java	(date 1678773203602)
@@ -1,2 +1,277 @@
-package com.curso_simulaciones.mivigesimaoctavaapp.actividades_secundarias;public class ActividadDesplegadoraDatos {
+package com.curso_simulaciones.mivigesimaoctavaapp.actividades_secundarias;
+
+import android.app.Activity;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+
+import com.curso_simulaciones.mivigesimaoctavaapp.R;
+import com.curso_simulaciones.mivigesimaoctavaapp.datos.AlmacenDatosRAM;
+import com.curso_simulaciones.mivigesimaoctavaapp.utilidades.Acelerometro;
+import com.curso_simulaciones.mivigesimaoctavaapp.utilidades.Boton;
+import com.curso_simulaciones.mivigesimaoctavaapp.utilidades.Graficador;
+
+public class ActividadDesplegadoraDatos extends Activity {
+
+
+    private Boton ax, ay, az, a;
+
+    private Acelerometro acelerometro;
+    public Graficador graficador;
+
+    /*Hilo responsable de la animación
+     El trabajo de animación es mejor manejarlo en hilo
+     aparte para evitar bloqueos de la aplicación
+     debido al manejo simultáneo de la GUI con la Acivity
+    */
+    private HiloAnimacion hilo;
+
+
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        //para crear elementos de la GUI
+        crearElementosGUI();
+
+        /*
+        Para informar cómo se debe pegar el administrador de
+        diseño LinearLayout obtenido con el método crearGui()
+        */
+        ViewGroup.LayoutParams parametro_layout_principal = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+
+
+        //pegar el contenedor con la GUI
+        this.setContentView(crearGUI(), parametro_layout_principal);
+
+
+        eventos();
+
+        hilo = new HiloAnimacion(this);
+        hilo.start();
+
+    }//fin del método onCreate
+
+    private void crearElementosGUI() {
+
+
+        //botones
+        ax = new Boton(this);
+        ax.setImagen(R.drawable.ax);
+        ay = new Boton(this);
+        ay.setImagen(R.drawable.ay);
+        az = new Boton(this);
+        az.setImagen(R.drawable.az);
+        a = new Boton(this);
+        a.setImagen(R.drawable.a);
+
+        //gauge
+        acelerometro = new Acelerometro(this);
+
+        //graficador
+        graficador = new Graficador(this);
+        //se está muestreando cada segundo (1000 ms)
+        graficador.setTituloEjeX("Tiempo (s)");
+        graficador.setTituloEjeY("Aceleración ax (m/s2)");
+        graficador.setGrosorLinea(2f);
+        graficador.setColorLinea(Color.RED);
+        graficador.setColorValores(Color.YELLOW);
+        graficador.setColorMarcadores(Color.GREEN);
+        graficador.setColorFondo(Color.BLACK);
+        graficador.setColorTextoEjes(Color.WHITE);
+
+
+    }
+
+
+    /*método responsable de administrar el diseño de la GUI*/
+    private LinearLayout crearGUI() {
+
+
+        LinearLayout linear_layout_principal = new LinearLayout(this);
+        linear_layout_principal.setOrientation(LinearLayout.HORIZONTAL);
+        linear_layout_principal.setGravity(Gravity.CENTER_HORIZONTAL);
+        linear_layout_principal.setGravity(Gravity.FILL);
+        linear_layout_principal.setBackgroundColor(Color.WHITE);
+        linear_layout_principal.setPadding(20, 20, 20, 20);
+        linear_layout_principal.setWeightSum(10);
+
+
+        //LinearLayout primera columna
+        LinearLayout linear_layout_primera_columna = new LinearLayout(this);
+        linear_layout_primera_columna.setOrientation(LinearLayout.HORIZONTAL);
+        linear_layout_primera_columna.setGravity(Gravity.FILL);
+        linear_layout_primera_columna.setBackgroundColor(Color.rgb(245, 245, 245));
+        //parámetro para pegar la primera columna al principal
+        LinearLayout.LayoutParams parametros_primera_columna = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.MATCH_PARENT);
+        parametros_primera_columna.weight = 4.0f;
+        parametros_primera_columna.setMargins(10, 10, 5, 10);
+        linear_layout_primera_columna.setLayoutParams(parametros_primera_columna);
+
+
+        //LinearLayout segunda columna
+        LinearLayout linear_layout_segunda_columna = new LinearLayout(this);
+        linear_layout_segunda_columna.setOrientation(LinearLayout.HORIZONTAL);
+        linear_layout_segunda_columna.setGravity(Gravity.FILL);
+        linear_layout_segunda_columna.setBackgroundColor(Color.rgb(245, 245, 245));
+        linear_layout_segunda_columna.setWeightSum(1.0f);
+        //parámetro para pegar la segunda columna al principal
+        LinearLayout.LayoutParams parametros_segunda_columna = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.MATCH_PARENT);
+        parametros_segunda_columna.weight = 4.0f;
+        parametros_segunda_columna.setMargins(5, 10, 10, 10);
+        linear_layout_segunda_columna.setLayoutParams(parametros_segunda_columna);
+
+        //LinearLayout tercera columna
+        LinearLayout linear_layout_tercera_columna = new LinearLayout(this);
+        linear_layout_tercera_columna.setOrientation(LinearLayout.VERTICAL);
+        linear_layout_tercera_columna.setGravity(Gravity.FILL);
+        linear_layout_tercera_columna.setBackgroundColor(Color.YELLOW);
+        linear_layout_tercera_columna.setWeightSum(4.0f);
+        //parámetro para pegar la tercera columna al principal
+        LinearLayout.LayoutParams parametros_tercera_columna = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.MATCH_PARENT);
+        parametros_tercera_columna.weight = 2.0f;
+        parametros_tercera_columna.setMargins(5, 10, 10, 10);
+        linear_layout_tercera_columna.setLayoutParams(parametros_tercera_columna);
+
+
+        //peado de las tres columnas al principal
+        linear_layout_principal.addView(linear_layout_primera_columna);
+        linear_layout_principal.addView(linear_layout_segunda_columna);
+        linear_layout_principal.addView(linear_layout_tercera_columna);
+
+
+        //pegar gauge primera columna
+        linear_layout_primera_columna.addView(acelerometro);
+
+        //pegar grafico en segunda columna
+        LinearLayout.LayoutParams parametros_grafica = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.MATCH_PARENT);
+        parametros_grafica.weight = 1.0f;
+        linear_layout_segunda_columna.addView(graficador, parametros_grafica);
+
+        //pegar botones tercera columna
+        LinearLayout.LayoutParams parametros_pegado_boton = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0);
+        parametros_pegado_boton.weight = 1.0f;
+        linear_layout_tercera_columna.addView(ax, parametros_pegado_boton);
+        linear_layout_tercera_columna.addView(ay, parametros_pegado_boton);
+        linear_layout_tercera_columna.addView(az, parametros_pegado_boton);
+        linear_layout_tercera_columna.addView(a, parametros_pegado_boton);
+
+
+        return linear_layout_principal;
+
+
+    }
+
+
+    private void eventos() {
+
+        ax.setOnClickListener(new View.OnClickListener() {
+
+            public void onClick(View v) {
+
+
+                lanzarDatosAx();
+
+
+            }
+        });
+
+        ay.setOnClickListener(new View.OnClickListener() {
+
+            public void onClick(View v) {
+
+                lanzarDatosAy();
+            }
+        });
+
+        az.setOnClickListener(new View.OnClickListener() {
+
+            public void onClick(View v) {
+
+                lanzarDatosAz();
+            }
+        });
+
+        a.setOnClickListener(new View.OnClickListener() {
+
+            public void onClick(View v) {
+
+                lanzarDatosA();
+            }
+        });
+
+
+    }
+
+    private void lanzarDatosAx() {
+
+        resetear();
+        acelerometro.setComponenteAcelerometro(1);
+        acelerometro.setRango(-20,20);
+
+        graficador.setTituloEjeY("Aceleración ax (m/s2)");
+        hilo.corriendo = true;
+
+    }
+
+    private void lanzarDatosAy() {
+
+        resetear();
+        acelerometro.setComponenteAcelerometro(2);
+        acelerometro.setRango(-20,20);
+        graficador.setTituloEjeY("Aceleración ay (m/s2)");
+        hilo.corriendo = true;
+
+    }
+
+    private void lanzarDatosAz() {
+
+        resetear();
+        acelerometro.setComponenteAcelerometro(3);
+        acelerometro.setRango(-20,20);
+        graficador.setTituloEjeY("Aceleración az (m/s2)");
+        hilo.corriendo = true;
+
+    }
+
+    private void lanzarDatosA() {
+
+        resetear();
+        acelerometro.setComponenteAcelerometro(4);
+        acelerometro.setRango(0,20);
+        graficador.setTituloEjeY("Aceleración a (m/s2)");
+        hilo.corriendo = true;
+
+    }
+
+
+
+
+
+    protected void onPause() {
+
+        hilo.corriendo = false;
+        AlmacenDatosRAM.datos.clear();
+        hilo.contador = 0;
+        super.onPause();
+    }
+
+    @Override
+    public void onRestart() {
+        super.onRestart();
+        hilo.corriendo = true;
+    }
+
+
+    private void resetear() {
+
+        hilo.corriendo = false;
+        AlmacenDatosRAM.datos.clear();
+        hilo.tiempo = 0;
+        hilo.contador = 0;
+
+    }
+
 }
Index: ../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/vista/Pizarra.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimacuartaapp.vista;public class Pizarra {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/vista/Pizarra.java b/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/vista/Pizarra.java
--- a/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/vista/Pizarra.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/vista/Pizarra.java	(date 1678767923219)
@@ -1,2 +1,266 @@
-package com.curso_simulaciones.mivigesimacuartaapp.vista;public class Pizarra {
+package com.curso_simulaciones.mivigesimacuartaapp.vista;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Typeface;
+import android.view.MotionEvent;
+import android.view.View;
+
+import com.curso_simulaciones.mivigesimacuartaapp.datos.AlmacenDatosRAM;
+import com.curso_simulaciones.simulphysics.objetos_laboratorio.Flecha;
+import com.curso_simulaciones.simulphysics.objetos_laboratorio.ObjetoLaboratorio;
+import com.curso_simulaciones.simulphysics.objetos_laboratorio.Particula;
+
+public class Pizarra extends View {
+
+    private ObjetoLaboratorio objetosLab[];
+
+    public boolean evento_touch=true;
+
+    private float evento_x_touch_en_pixeles= AlmacenDatosRAM.x_en_pixeles;
+    private float evento_y_touch_en_pixeles=AlmacenDatosRAM.y_en_pixeles;
+    private float factorConversion_metroApixel,factorConversion_pixelAmetro;
+
+
+    private float origen_x, origen_y;
+    private float m_x = 1;
+    private float m_y = 1;
+
+
+    /**
+     * Constructor
+     *
+     * @param context
+     */
+    public Pizarra(Context context) {
+        super(context);
+
+        eventos();
+
+    }
+
+
+    public void setSistemaCoordenadas(float origen_x, float origen_y, float m_x, float m_y) {
+
+        this.origen_x = origen_x;
+        this.origen_y = origen_y;
+        this.m_x = m_x;
+        this.m_y = m_y;
+
+    }
+
+    public void eventos(){
+
+        this.setOnTouchListener(new View.OnTouchListener() {
+
+
+            public boolean onTouch(View v, MotionEvent event) {
+
+                int action = event.getAction();
+
+                if(evento_touch==true) {
+                    //touch en pixeles
+                    evento_x_touch_en_pixeles = event.getX()-origen_x;
+                    evento_y_touch_en_pixeles = -(event.getY()-origen_y) + CR.pcApxY(50);
+
+
+                }
+
+
+
+                switch (action) {
+
+                    case MotionEvent.ACTION_DOWN:
+
+
+                        break;
+
+                    case MotionEvent.ACTION_MOVE:
+
+                        if(evento_touch==true) {
+
+                            dibujarEstadoInicial();
+
+
+                        }
+
+
+                        break;
+
+                    case MotionEvent.ACTION_UP:
+
+
+                        break;
+
+
+                }
+
+                return true;
+            }
+
+        });//fin onTouch
+
+
+    }//fin eventos
+
+
+    public void setEstadoEscena(ObjetoLaboratorio[] cuerpos) {
+
+        this.objetosLab = cuerpos;
+
+    }
+
+
+    //Método para dibujar la escena
+    private void dibujarEscena(Canvas canvas, Paint pincel) {
+
+        //dibujar las objetos de laboratorio
+        for (int i = 0; i < objetosLab.length; i++) {
+            if (objetosLab[i] != null) {
+                objetosLab[i].dibujese(canvas, pincel);
+            }
+        }
+
+
+    }
+
+
+    //método para dibujar
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+
+
+        Paint pincel = new Paint();
+        //evita efecto sierra
+        pincel.setAntiAlias(true);
+
+        canvas.save();
+        //cambio a sistema de coordenadas tradicional
+        canvas.translate(origen_x, origen_y);
+        canvas.scale(m_x, m_y);
+
+        //dibujar objetos
+        if (objetosLab != null)
+            dibujarEscena(canvas, pincel);
+
+        canvas.restore();
+
+        //dibujar letreros
+        dibujarLetreros(canvas, pincel);
+
+
+        //necesario para actualizar los dibujos en animaciones
+        invalidate();
+
+    }
+
+    private void dibujarEstadoInicial(){
+
+        //recordar que el (0,0) está en
+        float posición_inicial_x_en_pixeles = evento_x_touch_en_pixeles-AlmacenDatosRAM.origenX_en_pixeles;
+        float posición_inicial_y_en_pixeles = evento_y_touch_en_pixeles-AlmacenDatosRAM.origenY_en_pixeles;
+
+        Particula bolita= (Particula)objetosLab[6];//se hace casting
+        bolita.setPosicion(posición_inicial_x_en_pixeles,posición_inicial_y_en_pixeles);
+
+        Flecha velocidad= (Flecha)objetosLab[3];//se hace casting
+        velocidad.setPosicion(posición_inicial_x_en_pixeles,posición_inicial_y_en_pixeles);
+
+        Flecha velocidadX= (Flecha)objetosLab[4];//se hace casting
+        velocidadX.setPosicion(posición_inicial_x_en_pixeles,posición_inicial_y_en_pixeles);
+
+        Flecha velocidadY= (Flecha)objetosLab[5];//se hace casting
+        velocidadY.setPosicion(posición_inicial_x_en_pixeles,posición_inicial_y_en_pixeles);
+
+        Flecha aceleracion= (Flecha)objetosLab[2];//se hace casting
+        aceleracion.setPosicion(posición_inicial_x_en_pixeles,posición_inicial_y_en_pixeles);
+
+        //reportar esta posicion inicial en pixeles AlmacenDatosRAM
+        AlmacenDatosRAM.xi_en_pixeles = posición_inicial_x_en_pixeles;
+        AlmacenDatosRAM.yi_en_pixeles = posición_inicial_y_en_pixeles;
+
+        //reportar esta posicion inicial en m AlmacenDatosRAM
+        factorConversion();
+        AlmacenDatosRAM.xi_en_metros= factorConversion_pixelAmetro*posición_inicial_x_en_pixeles;;
+        AlmacenDatosRAM.yi_en_metros=factorConversion_pixelAmetro*posición_inicial_y_en_pixeles;
+        AlmacenDatosRAM.x_en_metros= AlmacenDatosRAM.xi_en_metros;
+        AlmacenDatosRAM.y_en_metros= AlmacenDatosRAM.yi_en_metros;
+    }
+
+
+    private void dibujarLetreros(Canvas canvas, Paint pincel) {
+
+
+        pincel.setTextSize(CR.pcApxL(3f));
+        pincel.setTypeface(Typeface.MONOSPACE);
+
+        String tiempo= String.format("%.2f", AlmacenDatosRAM.tiempo);
+        String desplazamiento_en_metros_X= String.format("%.2f", AlmacenDatosRAM.desplazamiento_en_metros_X);
+        String desplazamiento_en_metros_Y= String.format("%.2f", AlmacenDatosRAM.desplazamiento_en_metros_Y);
+
+        //cuando empieza una nueva simulación la posición es
+        // la corrspondiente a la posción inicial
+        if(AlmacenDatosRAM.NUEVO==true){
+            AlmacenDatosRAM.x_en_metros= AlmacenDatosRAM.xi_en_metros;
+            AlmacenDatosRAM.y_en_metros= AlmacenDatosRAM.yi_en_metros;
+        }
+
+        String x_metros = String.format("%.2f", AlmacenDatosRAM.x_en_metros);
+        String y_metros = String.format("%.2f", AlmacenDatosRAM.y_en_metros);
+        String angulo= String.format("%.2f", AlmacenDatosRAM.angulo);
+        String vX= String.format("%.2f", AlmacenDatosRAM.velocidadX);
+        String vY= String.format("%.2f", AlmacenDatosRAM.velocidadY);
+        String v= String.format("%.2f", AlmacenDatosRAM.velocidad);
+        String a= String.format("%.2f", AlmacenDatosRAM.aceleracion);
+
+        canvas.drawText("Desplaz. x  (m) = "+desplazamiento_en_metros_X,CR.pcApxX(2f),CR.pcApxY(4f),pincel);
+        canvas.drawText("Desplaz. y (m) = "+desplazamiento_en_metros_Y,CR.pcApxX(2f),CR.pcApxY(8f),pincel);
+        canvas.drawText("t  (s) = "+tiempo,CR.pcApxX(2f),CR.pcApxY(12f),pincel);
+        canvas.drawText("x  (m) = "+x_metros,CR.pcApxX(2f),CR.pcApxY(16f),pincel);
+        canvas.drawText("y  (m) = " +y_metros,CR.pcApxX(2f),CR.pcApxY(20f),pincel);
+        canvas.drawText("Ang.  (0) = " +angulo,CR.pcApxX(2f),CR.pcApxY(24f),pincel);
+        pincel.setColor(Color.MAGENTA);
+        canvas.drawText("Vx (m/s) = " +vX,CR.pcApxX(2f),CR.pcApxY(28f),pincel);
+        pincel.setColor(Color.rgb(0,128,0));
+        canvas.drawText("Vy (m/s) = " +vY,CR.pcApxX(2f),CR.pcApxY(32f),pincel);
+        pincel.setColor(Color.RED);
+        canvas.drawText("V  (m/s) = " +v,CR.pcApxX(2f),CR.pcApxY(36f),pincel);
+        pincel.setColor(Color.BLUE);
+        canvas.drawText("a  (m/s2) = " +a,CR.pcApxX(2f),CR.pcApxY(40f),pincel);
+
+        pincel.setColor(Color.RED);
+        canvas.drawText("Arrastrar con el dedo para cambiar la posición inicial",CR.pcApxX(2f),CR.pcApxY(85f),pincel);
+
+        pincel.setColor(Color.BLACK);
+        //autor
+        String autor = "Copyright 2022 para Diego Luis Aristizábal Ramírez" ;
+        canvas.drawText(autor, CR.pcApxX(2),CR.pcApxY(90),pincel);
+        String universidad = "Universidad Nacional de Colombia - Sede Medellín";
+        canvas.drawText(universidad, CR.pcApxX(2),CR.pcApxY(95),pincel);
+
+    }
+
+    private void factorConversion(){
+
+       /*
+        Para dar una equivalencia de pixeles
+        en metros se aumirá que 50 m equivale
+        al ALTO de la pantalla (en posición
+        LANSCAPE) en pixeles. Con base en esto
+        el factor de conversion de metos  apixeles
+        es:
+
+        factorConversion_metroApixel= (ALTO en pixeles/ 50 metros)
+        factorConversion_pixelAmetro= (ALTO metros / ALTO en pixeles)
+
+        */
+
+        factorConversion_metroApixel =  CR.pcApxY(100f)/50f;
+
+        factorConversion_pixelAmetro = 50f/CR.pcApxY(100f);
+
+    }
+
 }
Index: ../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/vista/CR.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaterceraapp.vista;public class CR {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/vista/CR.java b/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/vista/CR.java
--- a/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/vista/CR.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/vista/CR.java	(date 1678765758440)
@@ -1,2 +1,137 @@
-package com.curso_simulaciones.mivigesimaterceraapp.vista;public class CR {
+package com.curso_simulaciones.mivigesimaterceraapp.vista;
+
+public class CR {
+    public static float anchoPizarra;
+    public static float altoPizarra;
+
+
+    public CR(){
+
+    }
+
+
+    /**
+     * Método para convertir porcentaje de
+     * posición en X a pixeles.
+     * @param pcX
+     * @return
+     */
+    public static float pcApxX(float pcX) {
+
+        float pxX = pcX * anchoPizarra / 100f;
+
+        return pxX;
+
+    }
+
+
+
+
+    /**
+     * Método para convertir porcentaje de
+     * posición en Y a pixeles.
+     * @param pcY
+     * @return
+     */
+    public static float pcApxY(float pcY) {
+
+        float pxY = pcY * altoPizarra / 100f;
+
+        return pxY;
+
+    }
+
+
+    /**
+     * Dada una longitud pcL en porcentaje
+     * referido al menor entre el ancho
+     * y el alto de Pizarra la convierte a una
+     * longitud en pixeles.
+     * @param pcL
+     * @return
+     */
+    public static float pcApxL(float pcL) {
+
+        float pxL = 0;
+
+        if (anchoPizarra > altoPizarra) {
+
+            pxL = pcL * altoPizarra / 100f;
+
+
+        } else {
+
+            pxL = pcL * anchoPizarra / 100f;
+        }
+
+
+        return pxL;
+
+    }
+
+
+
+    /**
+     * Convierte pixeles de uan posicón en
+     * X a porcentaje.
+     * @param pxX
+     * @return
+     */
+    public static float  pxXApc(float pxX) {
+
+        float pcX = pxX * 100f / anchoPizarra;
+
+        return pcX;
+
+    }
+
+
+
+    /**
+     * Convierte pixeles de una posición en
+     * Y a porcentaje.
+     * @param pxY
+     * @return
+     */
+    public static float  pxYApc(float pxY) {
+
+        float pcY = pxY * 100f / altoPizarra;
+
+        return pcY;
+
+    }
+
+
+    /*Convierte pixeles referidas
+      al menor entre el ancho y el
+      alto en porcentaje
+  */
+
+    /**
+     * Dada una longitud pxL en pixeles la
+     * convierte a porcentaje referido al menor entre
+     * el ancho y el alto.
+     * Pizarra.
+     * @param pxL
+     * @return
+     */
+    public static float pxApcL(float pxL) {
+
+        float pcL = 0;
+
+        if (CR.anchoPizarra > altoPizarra) {
+
+            pcL = pxL * 100f/ altoPizarra ;
+
+
+        } else {
+
+            pcL = pxL * 100f/ anchoPizarra;
+        }
+
+
+        return pcL;
+
+    }
+
 }
Index: app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/Boton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaoctavaapp.utilidades;public class Boton {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/Boton.java b/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/Boton.java
--- a/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/Boton.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/Boton.java	(date 1678772797006)
@@ -1,2 +1,125 @@
-package com.curso_simulaciones.mivigesimaoctavaapp.utilidades;public class Boton {
+package com.curso_simulaciones.mivigesimaoctavaapp.utilidades;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Matrix;
+import android.graphics.Paint;
+import android.widget.ImageView;
+
+public class Boton extends ImageView {
+
+    private Bitmap imagen;
+    Bitmap imagen_escalada = null;
+    private float tamamano_letra;
+    private String cadena = "";
+
+
+    public Boton(Context context) {
+
+        super(context);
+
+
+    }
+
+
+    public void setText(String cadena) {
+
+        this.cadena = cadena;
+
+
+    }
+
+
+    public String getText() {
+
+        this.cadena = cadena;
+
+        return cadena;
+
+
+    }
+
+
+    public void setImagen(int imagen_importada) {
+
+
+        imagen = BitmapFactory.decodeResource(getResources(), imagen_importada);
+
+
+    }
+
+
+    protected void onDraw(Canvas canvas) {
+
+
+        Paint pincel = new Paint();
+        pincel.setAntiAlias(true);
+        pincel.setLinearText(true);
+
+        float ancho=getWidth();
+        float alto=getHeight();
+        float escala=1;
+        if(ancho>alto){
+            escala=alto;
+        } else {escala=ancho;}
+
+        if (imagen != null) {
+
+            imagen_escalada = escalarImagen(imagen, (int) (0.9f * escala), (int) (0.9f * escala));
+
+        }
+
+        int ex = (getWidth() - imagen_escalada.getWidth()) / 2;
+        int ey = (getHeight() - imagen_escalada.getHeight()) / 2;
+
+        tamamano_letra = 0.08f * getWidth();
+
+        if (imagen != null) {
+            canvas.drawBitmap(imagen_escalada, ex, ey, null);//dimension,dimension, null);
+        }
+
+
+        pincel.setTextSize(tamamano_letra);
+        float anchoCadenaUnidades = pincel.measureText(cadena);
+        float posicion_x_letra = (getWidth() - anchoCadenaUnidades) / 2;
+        float posicion_y_letra = ey + imagen_escalada.getHeight() + tamamano_letra;
+
+        pincel.setColor(Color.BLACK);
+        canvas.drawText(cadena, posicion_x_letra, posicion_y_letra, pincel);
+
+
+        invalidate();
+
+    }
+
+    /*
+       Se escala con Matrix para no dañar la resolución
+     */
+
+
+    public Bitmap escalarImagen(Bitmap bitmap, int newWidth, int newHeight) {
+        Bitmap scaledBitmap = Bitmap.createBitmap(newWidth, newHeight, bitmap.getConfig());
+
+        float scaleX = newWidth / (float) bitmap.getWidth();
+        float scaleY = newHeight / (float) bitmap.getHeight();
+
+        Matrix scaleMatrix = new Matrix();
+        scaleMatrix.setScale(scaleX, scaleY, 0, 0);
+
+        Canvas canvas = new Canvas(scaledBitmap);
+        canvas.setMatrix(scaleMatrix);
+        Paint paint = new Paint(Paint.FILTER_BITMAP_FLAG);
+        paint.setAntiAlias(true);
+        paint.setDither(true);
+        paint.setFilterBitmap(true);
+        canvas.drawBitmap(bitmap, 0, 0, paint);
+
+        return scaledBitmap;
+
+    }
+
+
 }
Index: app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/actividades_secundarias/HiloAnimacion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaoctavaapp.actividades_secundarias;public class HiloAnimacion {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/actividades_secundarias/HiloAnimacion.java b/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/actividades_secundarias/HiloAnimacion.java
--- a/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/actividades_secundarias/HiloAnimacion.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/actividades_secundarias/HiloAnimacion.java	(date 1678772972937)
@@ -1,2 +1,61 @@
-package com.curso_simulaciones.mivigesimaoctavaapp.actividades_secundarias;public class HiloAnimacion {
+package com.curso_simulaciones.mivigesimaoctavaapp.actividades_secundarias;
+
+import com.curso_simulaciones.mivigesimaoctavaapp.datos.AlmacenDatosRAM;
+import com.github.mikephil.charting.data.Entry;
+
+public class HiloAnimacion extends Thread {
+
+
+    public boolean corriendo;
+    private long periodo_muestreo = 500;
+    public float tiempo = 0;
+    public int contador = 0;
+
+
+    private ActividadDesplegadoraDatos actividad;
+
+
+    public HiloAnimacion(ActividadDesplegadoraDatos actividad) {
+
+        this.actividad =actividad;
+
+    }
+
+
+
+
+    @Override
+    public void run() {
+        corriendo = true;
+        while (corriendo) {
+
+
+            try {
+                Thread.sleep(periodo_muestreo);
+
+                //graficador.setDatos(AlmacenDatosRAM.datos);
+                AlmacenDatosRAM.datos.add((new Entry(tiempo, AlmacenDatosRAM.datoActual)));
+                actividad.graficador.setDatos(AlmacenDatosRAM.datos);
+
+                tiempo = tiempo + 0.001f * periodo_muestreo;//en segundos
+
+                //se desplegarán sólo 21 datos (podrían ser muchos más)
+                if (contador > 20) {
+                    corriendo = false;
+                }
+
+                //numero datos
+                contador = contador + 1;
+
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+
+            }
+
+        }
+
+
+    }
+
+
 }
Index: ../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/vista/Pizarra.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaterceraapp.vista;public class Pizarra {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/vista/Pizarra.java b/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/vista/Pizarra.java
--- a/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/vista/Pizarra.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_10/MiVigesimaTerceraApp/app/src/main/java/com/curso_simulaciones/mivigesimaterceraapp/vista/Pizarra.java	(date 1678765824207)
@@ -1,2 +1,136 @@
-package com.curso_simulaciones.mivigesimaterceraapp.vista;public class Pizarra {
+package com.curso_simulaciones.mivigesimaterceraapp.vista;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.view.View;
+
+import com.curso_simulaciones.mivigesimaterceraapp.datos.AlmacenDatosRAM;
+import com.curso_simulaciones.simulphysics.objetos_laboratorio.ObjetoLaboratorio;
+
+public class Pizarra extends View {
+
+    private ObjetoLaboratorio objetosLab[];
+
+    private float origen_x, origen_y;
+    private float m_x = 1;
+    private float m_y = 1;
+
+
+    /**
+     * Constructor
+     *
+     * @param context
+     */
+    public Pizarra(Context context) {
+        super(context);
+
+    }
+
+
+    public void setSistemaCoordenadas(float origen_x, float origen_y, float m_x, float m_y) {
+
+        this.origen_x = origen_x;
+        this.origen_y = origen_y;
+        this.m_x = m_x;
+        this.m_y = m_y;
+
+    }
+
+
+    public void setEstadoEscena(ObjetoLaboratorio[] cuerpos) {
+
+        this.objetosLab = cuerpos;
+
+    }
+
+
+    //Método para dibujar la escena
+    private void dibujarEscena(Canvas canvas, Paint pincel) {
+
+        //dibujar las objetos de laboratorio
+        for (int i = 0; i < objetosLab.length; i++) {
+            if (objetosLab[i] != null) {
+                objetosLab[i].dibujese(canvas, pincel);
+            }
+        }
+
+
+    }
+
+
+    //método para dibujar
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+
+
+        Paint pincel = new Paint();
+        //evita efecto sierra
+        pincel.setAntiAlias(true);
+
+        canvas.save();
+        //cambio a sistema de coordenadas tradicional
+        canvas.translate(origen_x, origen_y);
+        canvas.scale(m_x, m_y);
+
+        //dibujar objetos
+        if (objetosLab != null)
+            dibujarEscena(canvas, pincel);
+
+        canvas.restore();
+
+        //dibujar letreros
+        dibujarLetreros(canvas, pincel);
+
+
+        //necesario para actualizar los dibujos en animaciones
+        invalidate();
+
+    }
+
+    private void dibujarLetreros(Canvas canvas, Paint pincel) {
+
+        pincel.setTextSize(CR.pcApxL(2.5f));
+        pincel.setColor(Color.rgb(100, 100, 100));
+
+        float m1 = AlmacenDatosRAM.m1;
+        float m2 = AlmacenDatosRAM.m2;
+
+        canvas.drawText("m1 = " + m1 + " kg", CR.pcApxX(2), CR.pcApxY(5), pincel);
+        canvas.drawText("m2 = " + m2 + " kg", CR.pcApxX(2), CR.pcApxY(10), pincel);
+
+        //aceleraciones con dos decimales
+        String a1 = String.format("%.2f", AlmacenDatosRAM.a1);
+        String a2 = String.format("%.2f", AlmacenDatosRAM.a2);
+        String F = String.format("%.2f", AlmacenDatosRAM.F);
+        canvas.drawText("a1 = " + a1 + " m/s2", CR.pcApxX(2), CR.pcApxY(15), pincel);
+        canvas.drawText("a2 = " + a2 + " m/s2", CR.pcApxX(2), CR.pcApxY(20), pincel);
+        canvas.drawText("Tensión = " + F + " N", CR.pcApxX(2), CR.pcApxY(25), pincel);
+
+
+        //posiciones con tres decimales
+        String y1 = String.format("%.3f", AlmacenDatosRAM.y1_en_metros);
+        String y2 = String.format("%.3f", AlmacenDatosRAM.y2_en_metros);
+        canvas.drawText("y1 = " + y1 + " m", CR.pcApxX(2), CR.pcApxY(30), pincel);
+        canvas.drawText("y2 = " + y2 + " m", CR.pcApxX(2), CR.pcApxY(35), pincel);
+
+        //desplazamientos con tres decimales
+        String d1 = String.format("%.3f", AlmacenDatosRAM.desplazamiento_m1_en_metros);
+        String d2 = String.format("%.3f", AlmacenDatosRAM.desplazamiento_m2_en_metros);
+
+        canvas.drawText("Desplaz. m1 = " + d1 + " m", CR.pcApxX(2), CR.pcApxY(40), pincel);
+        canvas.drawText("Desplaz. m2 = " + d2 + " m", CR.pcApxX(2), CR.pcApxY(45), pincel);
+
+        //tiempo con dos decimales
+        String tiempo = String.format("%.2f", AlmacenDatosRAM.tiempo);
+        canvas.drawText("Tiempo = " + tiempo + " s", CR.pcApxX(2), CR.pcApxY(50), pincel);
+
+
+        //autor
+        String autor = "Copyright 2022 para Diego Luis Aristizábal Ramírez - Universidad Nacional de Colombia - Sede Medellín";
+        canvas.drawText(autor, CR.pcApxX(5), CR.pcApxY(97), pincel);
+
+    }
+
 }
Index: ../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/actividades_secundarias/ActividadDesplegadoraDatos.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaseptimaapp.actividades_secundarias;\r\n\r\npublic class ActividadDespegadoraDatos {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/actividades_secundarias/ActividadDesplegadoraDatos.java b/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/actividades_secundarias/ActividadDesplegadoraDatos.java
--- a/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/actividades_secundarias/ActividadDesplegadoraDatos.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../MiVigesimaSeptimaApp/app/src/main/java/com/curso_simulaciones/mivigesimaseptimaapp/actividades_secundarias/ActividadDesplegadoraDatos.java	(date 1678771075957)
@@ -1,4 +1,156 @@
 package com.curso_simulaciones.mivigesimaseptimaapp.actividades_secundarias;
 
-public class ActividadDespegadoraDatos {
+import android.app.Activity;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.view.Gravity;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+
+import com.curso_simulaciones.mivigesimaseptimaapp.datos.AlmacenDatosRAM;
+import com.curso_simulaciones.mivigesimaseptimaapp.utilidades.Graficador;
+import com.curso_simulaciones.mivigesimaseptimaapp.utilidades.Luxometro;
+
+public class ActividadDesplegadoraDatos extends Activity {
+
+
+    private Luxometro luxometro;
+    public Graficador graficador;
+
+    /*Hilo responsable de la animación
+    El trabajo de animación es mejor manejarlo en hilo
+    aparte para evitar bloqueos de la aplicación
+    debido al manejo simultáneo de la GUI con la Acivity
+   */
+    private HiloAnimacion hilo;
+
+
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        //para crear elementos de la GUI
+        crearElementosGUI();
+
+        /*
+        Para informar cómo se debe pegar el administrador de
+        diseño LinearLayout obtenido con el método crearGui()
+        */
+        ViewGroup.LayoutParams parametro_layout_principal = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+
+
+        //pegar el contenedor con la GUI
+        this.setContentView(crearGUI(), parametro_layout_principal);
+
+        hilo = new HiloAnimacion(this);
+        hilo.start();
+
+    }//fin del método onCreate
+
+
+    private void crearElementosGUI() {
+
+
+        //gauge
+        luxometro = new Luxometro(this);
+        luxometro.setUnidades("lx");
+        luxometro.setAngulosSectores(100,100,50);
+        luxometro.setColorSectores(Color.YELLOW,Color.YELLOW,Color.RED);
+
+        //graficador
+        graficador = new Graficador(this);
+        //se está muestreando cada segundo (1000 ms)
+        graficador.setTituloEjeX("Tiempo (s)");
+        graficador.setTituloEjeY("Iluminancia (lx)");
+        graficador.setGrosorLinea(2f);
+        graficador.setColorLinea(Color.RED);
+        graficador.setColorValores(Color.YELLOW);
+        graficador.setColorMarcadores(Color.GREEN);
+        graficador.setColorFondo(Color.BLACK);
+        graficador.setColorTextoEjes(Color.WHITE);
+
+
+
+    }
+
+
+    /*método responsable de administrar el diseño de la GUI*/
+    private LinearLayout crearGUI() {
+
+
+        LinearLayout linear_layout_principal = new LinearLayout(this);
+        linear_layout_principal.setOrientation(LinearLayout.HORIZONTAL);
+        linear_layout_principal.setGravity(Gravity.CENTER_HORIZONTAL);
+        linear_layout_principal.setGravity(Gravity.FILL);
+        linear_layout_principal.setBackgroundColor(Color.WHITE);
+        linear_layout_principal.setPadding(20, 20, 20, 20);
+        linear_layout_principal.setWeightSum(10);
+
+
+        //LinearLayout primera columna
+        LinearLayout linear_layout_primera_columna = new LinearLayout(this);
+        linear_layout_primera_columna.setOrientation(LinearLayout.HORIZONTAL);
+        linear_layout_primera_columna.setGravity(Gravity.FILL);
+        linear_layout_primera_columna.setBackgroundColor(Color.rgb(245, 245, 245));
+        LinearLayout.LayoutParams parametros_primera_columna = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.MATCH_PARENT);
+        parametros_primera_columna.weight = 5.0f;
+        parametros_primera_columna.setMargins(10, 10, 5, 10);
+        linear_layout_primera_columna.setLayoutParams(parametros_primera_columna);
+
+
+        //LinearLayout segunda columna
+        LinearLayout linear_layout_segunda_columna = new LinearLayout(this);
+        linear_layout_segunda_columna.setOrientation(LinearLayout.HORIZONTAL);
+        linear_layout_segunda_columna.setGravity(Gravity.FILL);
+        linear_layout_segunda_columna.setBackgroundColor(Color.rgb(245, 245, 245));
+        linear_layout_segunda_columna.setWeightSum(1.0f);
+        LinearLayout.LayoutParams parametros_segunda_columna = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.MATCH_PARENT);
+        parametros_segunda_columna.weight = 5.0f;
+        parametros_segunda_columna.setMargins(5, 10, 10, 10);
+        linear_layout_segunda_columna.setLayoutParams(parametros_segunda_columna);
+
+
+        linear_layout_primera_columna.addView(luxometro);
+
+        //pegar grafico en segunda columna
+        LinearLayout.LayoutParams parametros_grafica = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.MATCH_PARENT);
+        parametros_grafica.weight = 1.0f;
+        linear_layout_segunda_columna.addView(graficador, parametros_grafica);
+
+        linear_layout_principal.addView(linear_layout_primera_columna);
+        linear_layout_principal.addView(linear_layout_segunda_columna);
+
+        return linear_layout_principal;
+    }
+
+
+
+
+    protected void onPause() {
+
+        resetear();
+        super.onPause();
+    }
+
+    @Override
+    public void onRestart() {
+        super.onRestart();
+        hilo.corriendo = true;
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        resetear();
+    }
+
+
+    private void resetear() {
+
+        hilo.corriendo = false;
+        AlmacenDatosRAM.datos.clear();
+        hilo.tiempo = 0;
+        hilo.contador=0;
+
+    }
+
 }
Index: app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/GaugeSimple.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaoctavaapp.utilidades;public class GaugeSimple {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/GaugeSimple.java b/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/GaugeSimple.java
--- a/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/GaugeSimple.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/GaugeSimple.java	(date 1678772954823)
@@ -1,2 +1,437 @@
-package com.curso_simulaciones.mivigesimaoctavaapp.utilidades;public class GaugeSimple {
+package com.curso_simulaciones.mivigesimaoctavaapp.utilidades;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.RectF;
+import android.view.View;
+
+public class GaugeSimple extends View {
+
+    private float largo;
+    private float minimo = 0;
+    private float maximo = 100f;
+    private float medida = 0.0f;//tomar como medida inicial
+    private String unidades = "UNIDADES";
+
+    //color de los sectores
+    private int colorPrimerTercio = Color.rgb(200, 200, 0);
+    private int colorSegundoTercio = Color.rgb(0, 180, 0);
+    private int colorTercerTercio = Color.RED;
+
+    //color del marco
+    private int colorFondoTacometro = Color.rgb(240,240,240);
+    private int colorBordeTacometro= Color.BLACK;
+
+    //color franja dinámica
+    private int colorFranjaDinamica = Color.RED;
+
+
+    private int angPrimertercio = 100;
+    private int angSegundoTercio = 100;
+    private int angTercerTercio = 40;
+
+    private int colorLineas = Color.BLACK;
+    private int colorNumeros =Color.BLACK;
+
+    private int colorNumerosDesplieggue = Color.BLACK;
+
+    private int numeroDivisiones= 25;
+    private int separacionDivisionesGrandes = 5;
+
+
+    /**
+     * Constructor de GaugeSimple
+     */
+    public GaugeSimple(Context context) {
+
+        super(context);
+
+        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB) {
+            this.setLayerType(View.LAYER_TYPE_SOFTWARE, null);
+
+        }
+    }
+
+    /**
+     * Modifica el rango de medicion
+     * desde minimo hasta maximo
+     *
+     * @param minimo
+     * @param maximo
+     */
+    public void setRango(float minimo, float maximo) {
+
+        this.minimo = minimo;
+        this.maximo = maximo;
+
+    }
+
+    public void setSeparacionesDivisionesGrandes(int separacionDivisionesGrandes){
+
+        this.separacionDivisionesGrandes = separacionDivisionesGrandes;
+
+
+    }
+
+
+    private void setNumeroDivisiones(int numeroDivisiones){
+
+        this.numeroDivisiones =numeroDivisiones;
+
+
+    }
+
+
+    /**
+     * Modifica el valor medido
+     *
+     * @param medida
+     */
+    public void setMedida(float medida) {
+
+        this.medida = medida;
+
+    }
+
+
+    /**
+     * Regresa el valor medido
+     *
+     * @return medida
+     */
+    public float getMedida() {
+
+        return medida;
+    }
+
+
+    /**
+     * Modifica las unidades del instrumento virtual
+     *
+     * @param unidades
+     */
+    public void setUnidades(String unidades) {
+
+        this.unidades = unidades;
+
+    }
+
+    /**
+     * Modifica el color del borde del marco
+     * @param colorBordeMarco
+     */
+
+    public void setColorBordeTacometro(int colorBordeMarco){
+
+        this.colorBordeTacometro = colorBordeMarco;
+
+    }
+
+
+    /**
+     * Modifica los colores de los sectores circulares
+     *
+     * @param colorPrimerTercio
+     * @param colorSegundoTercio
+     * @param colorTercerTercio
+     */
+    public void setColorSectores(int colorPrimerTercio, int colorSegundoTercio, int colorTercerTercio) {
+
+        this.colorPrimerTercio = colorPrimerTercio;
+        this.colorSegundoTercio = colorSegundoTercio;
+        this.colorTercerTercio = colorTercerTercio;
+
+    }
+
+    /**
+     * Modifica los angulos de los sectores circulares
+     * Deben sumar 250 grados
+     *
+     * @param angPrimerTercio
+     * @param angSegundoTercio
+     * @param angTercerTercio
+     */
+    public void setAngulosSectores(int angPrimerTercio, int angSegundoTercio, int angTercerTercio) {
+        this.angPrimertercio = angPrimerTercio;
+        this.angSegundoTercio = angSegundoTercio;
+        this.angTercerTercio = angTercerTercio;
+
+    }
+
+
+
+    /**
+     * Modifica el color de fondo del tacometro
+     *
+     * @param colorFondoTacometro
+     */
+    public void setColorFondoTacometro(int colorFondoTacometro) {
+
+        this.colorFondoTacometro = colorFondoTacometro;
+
+
+    }
+
+
+    /**
+     * Modifica el color de las lineas del tacometro
+     *
+     * @param color_lineas
+     */
+    public void setColorLineasTacometro(int color_lineas) {
+
+        this.colorLineas = color_lineas;
+
+
+    }
+
+
+    public void setColorNumeros(int colorNumeros){
+
+        this.colorNumeros = colorNumeros;
+
+    }
+
+
+    /**
+     * Modifica el color del numero que se despliega
+     *
+     * @param colorNumerosDesplieggue
+     */
+
+    public void setColorNumeroDespliegue(int colorNumerosDesplieggue) {
+
+        this.colorNumerosDesplieggue = colorNumerosDesplieggue;
+
+    }
+
+
+    /**
+     * Modifica el color de la franja dinámica
+     * @param colorFranjaDinamica
+     */
+    public void setColorFranjaDinámica(int colorFranjaDinamica) {
+
+        this.colorFranjaDinamica = colorFranjaDinamica;
+
+
+    }
+
+
+    /**
+     * @param canvas
+     */
+
+    //método para dibujar
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+
+        /*
+        se graba el estado actual del canvas
+        para al final restaurarlo
+        */
+        canvas.save();
+
+
+         /*
+         La vista tendra las mismas dimensiones de su
+         contenedor
+         */
+        float ancho = this.getWidth();//ancho de la vista
+        float alto = this.getHeight();//alto de la vista
+
+        /*
+         Se define la variable largo como el 80%
+         del menor valor entre alto y largo del
+         contenedor
+         */
+
+        if (ancho > alto) {
+
+            largo = 0.8f * alto;
+
+        } else {
+
+            largo = 0.8f * ancho;
+
+
+        }
+
+        /*
+          se hace tralación del (0,0) al centro
+          del contenedor
+        */
+        canvas.translate(0.5f * ancho, 0.5f * alto);
+
+        //configurando el pincel
+        Paint pincel = new Paint();
+        //evita efecto sierra
+        pincel.setAntiAlias(true);
+        //tamaño texto
+        pincel.setTextSize(0.05f * largo);
+        //para mejor manejo de la métrica de texto
+        pincel.setLinearText(true);
+        //para efectos de buen escalado de bitmaps
+        pincel.setFilterBitmap(true);
+        //para buen manejo de gradientes de color
+        pincel.setDither(true);
+
+
+
+        //dibujar fondo del tacómetro
+        //marco borde: circulo no relleno
+        pincel.setStyle(Paint.Style.STROKE);
+        //grosor y color
+        pincel.setStrokeWidth(0.02f*largo);
+        pincel.setColor(colorBordeTacometro);
+        canvas.drawCircle(0, 0, 0.5f * largo, pincel);
+        //marco fondo: círculo relleno
+        pincel.setStyle(Paint.Style.FILL);
+        pincel.setColor(colorFondoTacometro);
+        canvas.drawCircle(0, 0, 0.48f * largo, pincel);
+
+
+
+        //dibujar los tres segementos circulares
+        float esquinaSuperiorIzquierdaX = -0.45f * largo;
+        float esquinaSuperiorIzquierdaY = -0.45f * largo;
+        float esquinaInferiorDerechaX = 0.45f * largo;
+        float esquinaInferiorDerechaY = 0.45f * largo;
+
+        RectF rect = new RectF(esquinaSuperiorIzquierdaX, esquinaSuperiorIzquierdaY,
+                esquinaInferiorDerechaX, esquinaInferiorDerechaY);
+
+        //grosor líneas
+        pincel.setStrokeWidth(0.02f*largo);
+        //arcos
+        pincel.setStyle(Paint.Style.STROKE);
+        pincel.setColor(colorPrimerTercio);
+        //con argumento false solo dibuja el arco y no el sector circular
+        canvas.drawArc(rect, 150, angPrimertercio, false, pincel);
+        pincel.setColor(colorSegundoTercio);
+        canvas.drawArc(rect, 150 + angPrimertercio, angSegundoTercio, false, pincel);
+        pincel.setColor(colorTercerTercio);
+        canvas.drawArc(rect, 150 + angPrimertercio + angSegundoTercio, angTercerTercio, false, pincel);
+
+
+        //dibujar la escala
+        float indent = (float) (0.05 * largo);
+        float posicionY = (float) (0.5 * largo);
+
+
+
+         /*
+         Divisiones grandes, pequeñas y números
+         Se dibuja primero la división vertical.
+         Luego se repite rotando de a 50 grados comenzando
+         en 235 grados.
+          */
+        pincel.setStyle(Paint.Style.FILL);
+
+
+        for (int i = 0; i < numeroDivisiones +1; i = i + 1) {//6
+            // float anguloRotacion = 235 + 50 * i;
+            float salto = 240f/numeroDivisiones;
+            //float anguloRotacion = 235 + 50 * i;
+            float anguloRotacion = 240 + salto * i;
+            canvas.save();
+            canvas.rotate(anguloRotacion, 0, 0);
+            pincel.setColor(colorLineas);
+
+            if(i%separacionDivisionesGrandes ==0) {
+                //dibujar líneas grandes
+                pincel.setStrokeWidth(0.01f * largo);
+                canvas.drawLine(0, -posicionY, 0, -posicionY + indent, pincel);
+
+                //dibujar los números
+                float valorIncrementoMarcas = (maximo - minimo) /numeroDivisiones;
+                int valorMarca = (int) (minimo + valorIncrementoMarcas * i);
+                String numero = "" + valorMarca;
+
+                //ancho de la cadena del número
+                float anchoCadenaNumero = pincel.measureText(numero);
+
+                //dibuja números rotados
+                //endereza los números a orientación horizontal
+                canvas.rotate(-anguloRotacion, 0, -posicionY + 2.5f * indent);
+                pincel.setColor(colorNumeros);
+                canvas.drawText(numero, -0.5f * anchoCadenaNumero, -posicionY + 2.5f * indent, pincel);
+            } else {
+                //divisiones pequeñas
+                pincel.setStrokeWidth(0.005f * largo);
+                canvas.drawLine(0, -posicionY, 0, -posicionY + (float) (0.6 * indent), pincel);
+
+            }
+
+            canvas.restore();
+
+        }
+
+        /*
+        dibujar la aguja
+        */
+        //aqui empieza dibujo de la aguja
+        //calcular angulo para ubicar la aguja de acuerdo al valor medido
+        float angulo_rotacion_medida = 240 + (240f / (maximo - minimo)) * (medida - minimo);
+        //Dibujar aguja
+        pincel.setStrokeWidth(0.005f * largo);
+        pincel.setColor(Color.RED);
+        canvas.rotate(angulo_rotacion_medida, 0, 0);
+        float b = (float) (1.5f* indent);
+        canvas.drawLine(0, -posicionY, 0, b, pincel);
+        canvas.rotate(-angulo_rotacion_medida, 0, 0);
+        pincel.setStyle(Paint.Style.FILL);
+        pincel.setColor(colorFondoTacometro);
+        canvas.drawCircle(0, 0, (float) (0.4 * indent), pincel);
+        pincel.setColor(Color.RED);
+        pincel.setStyle(Paint.Style.STROKE);
+        canvas.drawCircle(0, 0, (float) (0.4 * indent), pincel);
+        //aquí termina dibujo de la aguja
+
+
+
+
+        //franja dinámica
+        float a = (float) 0.03* largo;
+        rect = new RectF(esquinaSuperiorIzquierdaX - a, esquinaSuperiorIzquierdaY - a,
+                esquinaInferiorDerechaX + a, esquinaInferiorDerechaY + a);
+        pincel.setColor(colorFranjaDinamica);
+        pincel.setStrokeWidth(0.01f*largo);
+        canvas.drawArc(rect, 150, angulo_rotacion_medida - 240, false, pincel);
+
+
+        //Dibujar las unidades
+        pincel.setStyle(Paint.Style.FILL);
+        pincel.setColor(colorLineas);
+        pincel.setTextSize(0.08f * largo);
+        float anchoCadenaUnidades = pincel.measureText(unidades);
+        canvas.drawText(unidades, -0.5f * anchoCadenaUnidades,- 0.15f * largo, pincel);
+        //aqui termina dibujo de las unidades
+
+        //aqui despliegue de la medida
+        pincel.setTextSize(0.1f * largo);
+        float anchoCadenaNumero = pincel.measureText("" + medida);
+        pincel.setColor(colorNumerosDesplieggue);
+        canvas.drawText("" + medida, -0.5f * anchoCadenaNumero, 0.2f * largo, pincel);
+
+        //marcar empresa
+        String empresa = "IoT.PhysicsSensor";
+        pincel.setTextSize(0.05f * largo);
+        float anchoCadenaNombreEmpresa = pincel.measureText(empresa);
+        canvas.drawText(empresa, -0.5f * anchoCadenaNombreEmpresa, 0.35f * largo, pincel);
+
+
+
+        //se restaura el canvas al estado incial
+        //el que se garbó al principio de este método
+        canvas.restore();
+
+        //para efectos de animación
+        invalidate();
+
+    }//fin onDraw
+
+
 }
Index: app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/Acelerometro.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaoctavaapp.utilidades;public class Acelerometro {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/Acelerometro.java b/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/Acelerometro.java
--- a/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/Acelerometro.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/Acelerometro.java	(date 1678772954804)
@@ -1,2 +1,88 @@
-package com.curso_simulaciones.mivigesimaoctavaapp.utilidades;public class Acelerometro {
+package com.curso_simulaciones.mivigesimaoctavaapp.utilidades;
+
+import android.content.Context;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+
+import com.curso_simulaciones.mivigesimaoctavaapp.datos.AlmacenDatosRAM;
+
+public class Acelerometro extends GaugeSimple implements SensorEventListener {
+
+    private SensorManager sensorManager;
+    private int componenteAceleracion = 1;
+
+    public Acelerometro(Context context) {
+        super(context);
+
+        captarSensor(context);
+
+        this.setRango(-20, 20);
+
+
+    }
+
+
+    public void setComponenteAcelerometro(int componenteAceleracion) {
+
+        this.componenteAceleracion = componenteAceleracion;
+
+    }
+
+    private void captarSensor(Context context) {
+
+        //captamos el servicio del sensor
+        sensorManager = (SensorManager) context.getSystemService(Context.SENSOR_SERVICE);
+        sensorManager.registerListener(this, sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER), SensorManager.SENSOR_DELAY_FASTEST);
+
+    }
+
+    //se activa sólo cuando hay cambios
+    public void onSensorChanged(SensorEvent event) {
+
+        //en x
+        float a = 0;
+        float medida_x = 0;
+        float medida_y = 0;
+        float medida_z = 0;
+        float medida = 0;
+
+        medida_x = event.values[SensorManager.DATA_X];
+        medida_y = event.values[SensorManager.DATA_Y];
+        medida_z = event.values[SensorManager.DATA_Z];
+        float resultado = medida_x * medida_x + medida_y * medida_y + medida_z * medida_z;
+        a = (float) (Math.sqrt(resultado));
+
+
+        if (componenteAceleracion == 1) {
+            medida = medida_x;
+            this.setUnidades(" ax (m/S2)");
+        }
+        if (componenteAceleracion == 2){
+            medida = medida_y;
+            this.setUnidades(" ay (m/S2)");
+        }
+        if (componenteAceleracion == 3){
+            medida = medida_z;
+            this.setUnidades(" az (m/S2)");
+        }
+        if (componenteAceleracion == 4){
+            medida = a;
+            this.setUnidades(" a (m/S2)");
+        }
+
+        //un decimal
+        medida = (float) (Math.round(medida * 10) / 10.0f);
+        this.setMedida(medida);
+        //almacenar dato actual
+        AlmacenDatosRAM.datoActual = medida;
+
+    }
+
+    @Override
+    public void onAccuracyChanged(Sensor sensor, int accuracy) {
+
+    }
+
 }
Index: app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/datos/AlmacenDatosRAM.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaoctavaapp.datos;public class AlmacenDatosRAM {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/datos/AlmacenDatosRAM.java b/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/datos/AlmacenDatosRAM.java
--- a/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/datos/AlmacenDatosRAM.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/datos/AlmacenDatosRAM.java	(date 1678772797061)
@@ -1,2 +1,19 @@
-package com.curso_simulaciones.mivigesimaoctavaapp.datos;public class AlmacenDatosRAM {
+package com.curso_simulaciones.mivigesimaoctavaapp.datos;
+
+import java.util.ArrayList;
+
+public class AlmacenDatosRAM {
+
+    public static float datoActual;
+
+    /*
+      ArrayList es una clase que permite almacenar
+      objetos con la diferencia respecto a los
+      arreglos [], que ella misma va cambiando
+      dinámicamente su tamaño a medida que se le
+      agregan elementos
+     */
+
+    public static ArrayList datos = new ArrayList<>();
+
 }
Index: app/src/androidTest/java/com/curso_simulaciones/mivigesimaoctavaapp/ExampleInstrumentedTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaoctavaapp;\r\n\r\nimport android.content.Context;\r\nimport android.support.test.InstrumentationRegistry;\r\nimport android.support.test.runner.AndroidJUnit4;\r\n\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\n\r\nimport static org.junit.Assert.*;\r\n\r\n/**\r\n * Instrumented test, which will execute on an Android device.\r\n *\r\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\r\n */\r\n@RunWith(AndroidJUnit4.class)\r\npublic class ExampleInstrumentedTest {\r\n    @Test\r\n    public void useAppContext() {\r\n        // Context of the app under test.\r\n        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();\r\n        assertEquals(\"com.curso_simulaciones.mivigesimaoctavaapp\", appContext.getPackageName());\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/androidTest/java/com/curso_simulaciones/mivigesimaoctavaapp/ExampleInstrumentedTest.java b/app/src/androidTest/java/com/curso_simulaciones/mivigesimaoctavaapp/ExampleInstrumentedTest.java
--- a/app/src/androidTest/java/com/curso_simulaciones/mivigesimaoctavaapp/ExampleInstrumentedTest.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/app/src/androidTest/java/com/curso_simulaciones/mivigesimaoctavaapp/ExampleInstrumentedTest.java	(date 1678773593279)
@@ -1,14 +1,16 @@
 package com.curso_simulaciones.mivigesimaoctavaapp;
 
 import android.content.Context;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
+
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import static org.junit.Assert.*;
 
+import androidx.test.InstrumentationRegistry;
+import androidx.test.runner.AndroidJUnit4;
+
 /**
  * Instrumented test, which will execute on an Android device.
  *
Index: ../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/utilidades/Boton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimacuartaapp.utilidades;public class Boton {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/utilidades/Boton.java b/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/utilidades/Boton.java
--- a/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/utilidades/Boton.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/../../modulo_10/MiVigesimaCuartaApp/app/src/main/java/com/curso_simulaciones/mivigesimacuartaapp/utilidades/Boton.java	(date 1678768118901)
@@ -1,2 +1,113 @@
-package com.curso_simulaciones.mivigesimacuartaapp.utilidades;public class Boton {
+package com.curso_simulaciones.mivigesimacuartaapp.utilidades;
+
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Matrix;
+import android.graphics.Paint;
+import android.widget.ImageView;
+
+public class Boton extends ImageView {
+
+    private Bitmap imagen;
+    private int dimension;
+    private float tamamano_letra;
+    private String cadena="";
+
+
+
+    public Boton(Context context) {
+
+        super(context);
+
+
+    }
+
+
+
+    public void setText(String cadena){
+
+        this.cadena=cadena;
+
+
+    }
+
+
+    public String getText(){
+
+        this.cadena=cadena;
+
+        return cadena;
+
+
+    }
+
+
+
+    public void setImagen(int imagen_importada){
+
+        imagen = BitmapFactory.decodeResource(getResources(),imagen_importada);
+
+    }
+
+
+
+    protected void onDraw(Canvas canvas) {
+
+        Paint pincel = new Paint();
+        pincel.setAntiAlias(true);
+        pincel.setLinearText(true);
+
+        dimension=getWidth();
+
+        Bitmap imagen_escalada=null;
+        if(imagen!=null)
+            imagen_escalada =escalarImagen(imagen,(int)(0.8f*getHeight()), (int)(0.8f*getHeight()));
+
+        int ex= (getWidth()-imagen_escalada.getWidth())/2;
+        int ey= (getHeight()-imagen_escalada.getHeight())/2;
+
+        tamamano_letra=0.1f*getWidth();
+
+        if(imagen!=null)
+            canvas.drawBitmap(imagen_escalada, ex, ey, null);
+
+        pincel.setTextSize(tamamano_letra);
+        float anchoCadenaUnidades = pincel.measureText(cadena);
+        float posicion_x_letra= (getWidth()-anchoCadenaUnidades)/2;
+        float posicion_y_letra= ey+ imagen_escalada.getHeight()+ tamamano_letra;
+
+        pincel.setColor(Color.BLACK);
+        canvas.drawText(cadena,posicion_x_letra,posicion_y_letra,pincel);
+
+
+        invalidate();
+
+    }
+
+
+    public Bitmap escalarImagen(Bitmap bitmap,int newWidth,int newHeight) {
+        Bitmap scaledBitmap = Bitmap.createBitmap(newWidth, newHeight, bitmap.getConfig());
+
+        float scaleX = newWidth/(float) bitmap.getWidth();
+        float scaleY = newHeight/(float) bitmap.getHeight();
+
+        Matrix scaleMatrix = new Matrix();
+        scaleMatrix.setScale(scaleX, scaleY, 0, 0);
+
+        Canvas canvas = new Canvas(scaledBitmap);
+        canvas.setMatrix(scaleMatrix);
+        Paint paint = new Paint(Paint.FILTER_BITMAP_FLAG);
+        paint.setAntiAlias(true);
+        paint.setDither(true);
+        paint.setFilterBitmap(true);
+        canvas.drawBitmap(bitmap, 0, 0, paint);
+
+        return scaledBitmap;
+
+    }
+
 }
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n}\r\n\r\nandroid {\r\n    namespace 'com.curso_simulaciones.mivigesimaoctavaapp'\r\n    compileSdk 33\r\n\r\n    defaultConfig {\r\n        applicationId \"com.curso_simulaciones.mivigesimaoctavaapp\"\r\n        minSdk 21\r\n        targetSdk 33\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation 'com.android.support:appcompat-v7:28.0.0'\r\n    testImplementation 'junit:junit:4.13.2'\r\n    androidTestImplementation 'com.android.support.test:runner:1.0.2'\r\n    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/app/build.gradle	(date 1678772954818)
@@ -34,4 +34,5 @@
     testImplementation 'junit:junit:4.13.2'
     androidTestImplementation 'com.android.support.test:runner:1.0.2'
     androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
+    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
 }
\ No newline at end of file
Index: app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/Graficador.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.curso_simulaciones.mivigesimaoctavaapp.utilidades;public class Graficador {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/Graficador.java b/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/Graficador.java
--- a/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/Graficador.java	(revision 8171ef6fb448b79b6ee8a6ebb380ee6ac0a4619a)
+++ b/app/src/main/java/com/curso_simulaciones/mivigesimaoctavaapp/utilidades/Graficador.java	(date 1678772954800)
@@ -1,2 +1,126 @@
-package com.curso_simulaciones.mivigesimaoctavaapp.utilidades;public class Graficador {
+package com.curso_simulaciones.mivigesimaoctavaapp.utilidades;
+
+
+import android.content.Context;
+import android.view.View;
+
+import com.github.mikephil.charting.charts.LineChart;
+import com.github.mikephil.charting.components.YAxis;
+import com.github.mikephil.charting.data.LineData;
+import com.github.mikephil.charting.data.LineDataSet;
+
+import java.util.ArrayList;
+
+public class Graficador extends LineChart {
+
+
+    private LineDataSet lineDataSet;
+    private String tituloEjeY="";
+    private int colorLinea;
+    private float grosorLinea=1f;
+    private int colorValores;
+    private int colorMarcadores;
+
+
+
+    public Graficador(Context context) {
+
+        super(context);
+
+        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB) {
+            this.setLayerType(View.LAYER_TYPE_SOFTWARE, null);
+
+        }
+
+
+    }
+
+
+    public void setDatos(ArrayList datos) {
+
+        LineDataSet lineDataSet = new LineDataSet(datos, tituloEjeY);
+        lineDataSet.setLineWidth(grosorLinea);
+        lineDataSet.setColor(colorLinea);
+        lineDataSet.setValueTextColor(colorValores);
+        lineDataSet.setCircleColor(colorMarcadores);
+        LineData lineData = new LineData(lineDataSet);
+        this.setData(lineData);
+
+        /*
+         Esta instrucción es de la librería y es necesaria para
+         que el eje se vaya desplazando a medida que entran datos
+         */
+
+        this.moveViewTo(lineData.getEntryCount() - 7, 50f, YAxis.AxisDependency.LEFT);
+
+
+    }
+
+
+    /*
+     Modifica el grosr del trazo de la gráfica
+     */
+    public void setGrosorLinea(float grosorLinea){
+
+        this.grosorLinea=grosorLinea;
+    }
+
+    public void setColorLinea(int colorLinea){
+
+        this.colorLinea=colorLinea;
+
+    }
+
+
+    public  void setColorFondo(int colorFondo){
+
+        this.setBackgroundColor(colorFondo);
+
+    }
+
+
+    public void setColorTextoEjes(int colorTextoEjes){
+
+        //texto eje y izquierda
+        this.getAxisLeft().setTextColor(colorTextoEjes);
+        //texto eje y derecha
+        this.getAxisRight().setTextColor(colorTextoEjes);
+        //texto eje x
+        this.getXAxis().setTextColor(colorTextoEjes);
+        //texto título eje y
+        this.getLegend().setTextColor(colorTextoEjes);
+        //texto título eje x
+        this.getDescription().setTextColor(colorTextoEjes);
+
+    }
+
+    public void setColorValores(int colorValores){
+
+        this.colorValores=colorValores;
+
+
+    }
+
+
+    public void setTituloEjeX(String tituloEjeX){
+
+
+        this.getDescription().setText(tituloEjeX);
+
+    }
+
+
+    public void setTituloEjeY(String tituloEjeY){
+
+        this.tituloEjeY=tituloEjeY;
+
+    }
+
+
+    public void setColorMarcadores(int colorMarcadores){
+
+        this.colorMarcadores=colorMarcadores;
+    }
+
+
 }
